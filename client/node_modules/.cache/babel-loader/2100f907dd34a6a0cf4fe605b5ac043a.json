{"ast":null,"code":"var _jsxFileName = \"/Users/i537493/Documents/covid19-datavis/client/src/components/WorldChart.js\";\nimport React from 'react';\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLabel, VictoryScatter, createContainer } from 'victory';\nimport CountryChart from './CountryChart';\nconst sharedAxisStyles = {\n  tickLabels: {\n    fontSize: 10\n  },\n  axisLabel: {\n    padding: 45,\n    fontSize: 10,\n    fontStyle: \"italic\"\n  }\n};\nconst VictoryZoomVoronoiContainer = createContainer(\"zoom\", \"voronoi\");\nexport default class WorldChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      json: {},\n      countryCode: '',\n      firstLoad: true\n    }; // this.handleChange = this.handleChange.bind(this);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleRefresh = this.handleRefresh.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.bubbleChartData = this.bubbleChartData.bind(this);\n  }\n\n  bubbleChartData(json, metric) {\n    console.log(JSON.stringify(json[0]));\n    let array = json;\n    let bubbleData = array.map(obj => ({\n      x: obj[metric],\n      y: obj.TotalDeaths,\n      amount: obj.TotalConfirmed,\n      country: obj.Country,\n      countryCode: obj.CountryCode\n    }));\n    return bubbleData;\n  } // handleChange(event) {\n  //     this.setState({\n  //         countryCode: event.target.value\n  //     });\n  //     console.log(event.target.value);\n  //     console.log(this.state.countryCode);\n  // }\n\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  async callDB() {\n    await fetch(\"http://localhost:9000/worldDB\").then(res => {\n      return res.json();\n    }).then(json => {\n      this.setState({\n        json: json\n      });\n    }).catch(err => err);\n  }\n\n  findMax(array, prop) {\n    if (array.length !== 0) {\n      let maxObj = array.reduce((max, val) => val[prop] > max[prop] ? val : max);\n      let max = maxObj[prop];\n      return max;\n    }\n  }\n\n  async handleReset(event) {\n    event.preventDefault();\n    let url = \"http://localhost:9000/worldDB?reset=true\";\n    await fetch(url, {\n      method: 'POST'\n    }).then(function (response) {\n      return response.json();\n    }).then(dataJson => {\n      this.setState({\n        json: Array.from(dataJson)\n      });\n      console.log('why??');\n      console.log(JSON.stringify(dataJson[0]));\n      return this.state.json;\n    }).catch(err => err);\n  }\n\n  async handleRefresh(event) {\n    event.preventDefault();\n    let url = \"http://localhost:9000/worldDB\";\n    await fetch(url).then(function (response) {\n      return response.json();\n    }).then(dataJson => {\n      this.setState({\n        json: Array.from(dataJson)\n      });\n      return this.state.json;\n    }).catch(err => err);\n  }\n\n  async componentDidMount() {\n    if (this.state.firstLoad) {\n      const url = \"https://api.covid19api.com/summary\";\n      const response = await fetch(url);\n      const data = await response.json();\n      this.setState({\n        loading: false,\n        json: data.Countries,\n        firstLoad: false\n      });\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 20\n        }\n      }, \"loading...\");\n    }\n\n    if (this.state.countryCode !== '') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.setState({\n          countryCode: ''\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }\n      }, \"Back to World Chart\"), /*#__PURE__*/React.createElement(CountryChart, {\n        countryCode: this.state.countryCode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 17\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          paddingLeft: \"10%\",\n          marginTop: -50\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.handleRefresh,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }\n      }, \"Refresh\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.handleReset,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }\n      }, \"Reset\"), /*#__PURE__*/React.createElement(VictoryChart, {\n        style: {\n          parent: {\n            maxWidth: \"80%\"\n          }\n        },\n        height: 400,\n        width: 500,\n        padding: 100,\n        theme: VictoryTheme.material,\n        animate: {\n          duration: 1000\n        },\n        domain: {\n          x: [0, this.findMax(this.bubbleChartData(this.state.json, 'TotalRecovered'), 'x') * 1.2],\n          y: [0, this.findMax(this.bubbleChartData(this.state.json, 'TotalRecovered'), 'y') * 1.2]\n        },\n        containerComponent: /*#__PURE__*/React.createElement(VictoryZoomVoronoiContainer, {\n          zoomDomain: {\n            x: [0, this.findMax(this.bubbleChartData(this.state.json, 'TotalRecovered'), 'x') * 1.2],\n            y: [0, this.findMax(this.bubbleChartData(this.state.json, 'TotalRecovered'), 'y') * 1.2]\n          },\n          labels: ({\n            datum\n          }) => `${datum.country}: ${datum.amount} confirmed case(s)`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 29\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(VictoryLabel, {\n        fontSize: 10,\n        x: 250,\n        y: 60,\n        textAnchor: \"middle\",\n        text: \"World: Total Deaths vs Recoveries per Country\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(VictoryAxis, {\n        style: sharedAxisStyles,\n        tickFormat: x => `${x / 1000}k`,\n        label: \"Total Recoveries\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(VictoryAxis, {\n        dependentAxis: true,\n        tickFormat: x => `${x / 1000}k`,\n        label: \"Total Deaths\",\n        style: sharedAxisStyles,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(VictoryScatter, {\n        style: {\n          data: {\n            fill: \"#c43a31\",\n            opacity: \"50%\"\n          }\n        },\n        bubbleProperty: \"amount\",\n        maxBubbleSize: 20,\n        minBubbleSize: 1,\n        data: this.bubbleChartData(this.state.json, 'TotalRecovered'),\n        events: [{\n          target: 'data',\n          eventHandlers: {\n            onClick: (event, data) => {\n              let cCode = data.datum.countryCode;\n              console.log(cCode);\n              this.setState({\n                countryCode: cCode\n              });\n            }\n          }\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }\n      })));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/i537493/Documents/covid19-datavis/client/src/components/WorldChart.js"],"names":["React","VictoryChart","VictoryAxis","VictoryTheme","VictoryLabel","VictoryScatter","createContainer","CountryChart","sharedAxisStyles","tickLabels","fontSize","axisLabel","padding","fontStyle","VictoryZoomVoronoiContainer","WorldChart","Component","constructor","props","state","loading","json","countryCode","firstLoad","handleSubmit","bind","handleRefresh","handleReset","bubbleChartData","metric","console","log","JSON","stringify","array","bubbleData","map","obj","x","y","TotalDeaths","amount","TotalConfirmed","country","Country","CountryCode","event","preventDefault","callDB","fetch","then","res","setState","catch","err","findMax","prop","length","maxObj","reduce","max","val","url","method","response","dataJson","Array","from","componentDidMount","data","Countries","render","display","flexWrap","paddingLeft","marginTop","parent","maxWidth","material","duration","datum","fill","opacity","target","eventHandlers","onClick","cCode"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n     VictoryChart,\n     VictoryAxis, \n     VictoryTheme, \n     VictoryLabel,\n     VictoryScatter,\n     createContainer,\n    } from 'victory';\nimport CountryChart from './CountryChart'\n\nconst sharedAxisStyles = {\n    tickLabels: {\n        fontSize: 10\n    },\n    axisLabel: {\n        padding: 45,\n        fontSize: 10,\n        fontStyle: \"italic\"\n    }\n    };\n\nconst VictoryZoomVoronoiContainer = createContainer(\"zoom\", \"voronoi\");\n    \n\n\n\nexport default class WorldChart extends React.Component {\n    \n\n    constructor(props) {\n        super(props);\n        this.state = {\n        loading: true,\n        json: {},\n        countryCode : '',\n        firstLoad: true,\n    };\n        // this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleRefresh = this.handleRefresh.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n        this.bubbleChartData = this.bubbleChartData.bind(this);\n    }\n\n    bubbleChartData(json, metric) {\n        console.log(JSON.stringify(json[0]));\n        let array = json;\n        let bubbleData = array.map(obj => ({\n            x: obj[metric],\n            y: obj.TotalDeaths,  \n            amount: obj.TotalConfirmed, \n            country: obj.Country,\n            countryCode: obj.CountryCode\n        }));\n        return bubbleData;\n    }\n\n    // handleChange(event) {\n    //     this.setState({\n    //         countryCode: event.target.value\n    //     });\n    //     console.log(event.target.value);\n    //     console.log(this.state.countryCode);\n    // }\n\n    handleSubmit(event) {\n        event.preventDefault();\n    }\n\n    async callDB() {\n        await fetch(\"http://localhost:9000/worldDB\")\n            .then(res => {\n                return res.json();\n            }).then(json => {\n                this.setState({json: json});\n            }).catch(err => err);\n    }\n\n    findMax(array, prop){\n        if (array.length !== 0){\n            let maxObj = array.reduce((max, val) => val[prop] > max[prop] ? val : max);\n            let max = maxObj[prop];\n            return max;\n        }\n    }\n\n    async handleReset(event) {\n        event.preventDefault();\n        let url = \"http://localhost:9000/worldDB?reset=true\"\n        await fetch(url, {\n            method: 'POST'\n        }).then(function(response){\n            return response.json();\n        }).then(dataJson => {\n            this.setState({json: Array.from(dataJson)});\n            console.log('why??');\n            console.log(JSON.stringify(dataJson[0]));\n            return this.state.json\n        }).catch(err => err);\n    }\n\n    async handleRefresh(event) {\n        event.preventDefault();\n        let url = \"http://localhost:9000/worldDB\";\n        await fetch(url)\n        .then(function(response){\n            return response.json();\n        }).then(dataJson => {\n            this.setState({json: Array.from(dataJson)});\n            return this.state.json\n        }).catch(err => err);\n    }\n\n\n\n    async componentDidMount() {\n        if (this.state.firstLoad) {\n            const url = \"https://api.covid19api.com/summary\";\n            const response = await fetch(url);\n            const data = await response.json();\n            this.setState({loading: false, json: data.Countries, firstLoad: false});\n        }\n    }\n\n    render() {\n        if (this.state.loading){\n            return(<div>loading...</div>);\n        }\n\n        if (this.state.countryCode !== ''){\n            return(\n                <>\n                <button onClick= {() => this.setState({countryCode: ''})}>Back to World Chart</button>\n\n                <CountryChart countryCode={this.state.countryCode}/>\n                </>\n            );\n        } else {\n            return (\n                <div style={{ display: \"flex\", flexWrap: \"wrap\", paddingLeft: \"10%\", marginTop: -50 }}>\n                    {/* <div style={{minWidth: \"20%\"}}> */}\n                        <button onClick={this.handleRefresh}>Refresh</button>\n                        <button onClick={this.handleReset}>Reset</button>\n                    {/* </div> */}\n                    <VictoryChart\n                        style={{ parent: { maxWidth: \"80%\" } }}\n                        height={400}\n                        width={500}\n                        padding={100}\n                        theme={\n                            VictoryTheme.material\n                        }\n                        animate={{\n                            duration: 1000\n                        }}\n                        domain={{\n                            x: [0, this.findMax(this.bubbleChartData(this.state.json, 'TotalRecovered'), 'x') * 1.2],\n                            y: [0, this.findMax(this.bubbleChartData(this.state.json, 'TotalRecovered'), 'y') * 1.2]\n                        }}\n                        containerComponent={\n                            <VictoryZoomVoronoiContainer \n                                zoomDomain={{\n                                    x: [0, this.findMax(this.bubbleChartData(this.state.json, 'TotalRecovered'), 'x')*1.2],\n                                    y: [0, this.findMax(this.bubbleChartData(this.state.json, 'TotalRecovered'), 'y')*1.2]\n                                }}\n                                labels={({ datum }) => `${datum.country}: ${datum.amount} confirmed case(s)`}\n                            />\n                        }\n                    >   \n                        <VictoryLabel\n                            fontSize={10}\n                            x={250}\n                            y={60}\n                            textAnchor=\"middle\"\n                            text=\"World: Total Deaths vs Recoveries per Country\"\n                        />\n                        <VictoryAxis\n                            style={sharedAxisStyles}\n                            tickFormat={(x) => (`${x / 1000}k`)}\n                            label=\"Total Recoveries\"\n                        ></VictoryAxis>\n                        <VictoryAxis\n                            dependentAxis\n                            tickFormat={(x) => (`${x / 1000}k`)}\n                            label=\"Total Deaths\"\n                            style={sharedAxisStyles}\n                        ></VictoryAxis>\n                        <VictoryScatter\n                            style={{ data: { fill: \"#c43a31\", opacity: \"50%\" } }}\n                            bubbleProperty=\"amount\"\n                            maxBubbleSize={20}\n                            minBubbleSize={1}\n                            data={this.bubbleChartData(this.state.json, 'TotalRecovered')}\n                            events={[{\n                                target: 'data',\n                                eventHandlers: {\n                                    onClick: (event, data) => {\n                                        let cCode = data.datum.countryCode\n                                        console.log(cCode);\n                                        this.setState({countryCode: cCode});\n                                    },\n                                },\n                            }]}\n                        >\n                        </VictoryScatter>\n                    </VictoryChart>\n                </div>\n            ); \n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}