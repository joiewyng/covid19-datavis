{"ast":null,"code":"var _jsxFileName = \"/Users/i537493/Documents/covid19-datavis/client/src/components/WorldChartTest.js\";\nimport React from 'react';\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLabel, VictoryScatter, createContainer } from 'victory';\nimport CountryChart from './CountryChart';\nconst sharedAxisStyles = {\n  tickLabels: {\n    fontSize: 10\n  },\n  axisLabel: {\n    padding: 45,\n    fontSize: 10,\n    fontStyle: \"italic\"\n  }\n};\nconst VictoryZoomVoronoiContainer = createContainer(\"zoom\", \"voronoi\");\nexport default class WorldChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      json: {},\n      countryCode: '',\n      firstLoad: true,\n      countryList: [{\n        value: '',\n        display: '-- Select a country --'\n      }],\n      selectedCountry: '',\n      totalDeaths: '',\n      totalRecovered: '',\n      totalConfirmed: '',\n      newCountryName: '',\n      newTotalDeaths: '',\n      newTotalRecovered: '',\n      newTotalConfirmed: ''\n    }; // this.handleChange = this.handleChange.bind(this);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleRefresh = this.handleRefresh.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.bubbleChartData = this.bubbleChartData.bind(this);\n    this.handleDeathsChange = this.handleDeathsChange.bind(this);\n    this.handleRecoveredChange = this.handleRecoveredChange.bind(this);\n    this.handleConfirmedChange = this.handleConfirmedChange.bind(this);\n    this.updateCountryData = this.updateCountryData.bind(this);\n  }\n\n  bubbleChartData(json, metric) {\n    // console.log(JSON.stringify(json[0]));\n    let array = json;\n    let bubbleData = array.map(obj => ({\n      x: obj[metric],\n      y: obj.TotalDeaths,\n      amount: obj.TotalConfirmed,\n      country: obj.Country,\n      countryCode: obj.CountryCode\n    })); // console.log(bubbleData);\n\n    return bubbleData;\n  } // handleChange(event) {\n  //     this.setState({\n  //         countryCode: event.target.value\n  //     });\n  //     console.log(event.target.value);\n  //     console.log(this.state.countryCode);\n  // }\n\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  async callDB() {\n    await fetch(\"http://localhost:9000/worldDB\").then(res => {\n      return res.json();\n    }).then(json => {\n      this.setState({\n        json: Array.from(json)\n      });\n    }).catch(err => err);\n  }\n\n  findMax(array, prop) {\n    // if (array.length !== 0){\n    let maxObj = array.reduce((max, val) => val[prop] > max[prop] ? val : max);\n    let max = maxObj[prop];\n    console.log(max);\n    return max; // }\n  }\n\n  async handleReset(event) {\n    event.preventDefault();\n    let url = \"http://localhost:9000/worldDB?reset=true\";\n    await fetch(url, {\n      method: 'POST'\n    }).then(function (response) {\n      return response.json();\n    }).then(dataJson => {\n      this.setState({\n        json: Array.from(dataJson)\n      });\n      return this.state.json;\n    }).catch(err => err);\n  }\n\n  async handleRefresh(event) {\n    event.preventDefault();\n    let url = \"http://localhost:9000/worldDB\";\n    await fetch(url).then(function (response) {\n      return response.json();\n    }).then(dataJson => {\n      this.setState({\n        json: Array.from(dataJson)\n      });\n      return this.state.json;\n    }).catch(err => err);\n  }\n\n  async loadCountries() {\n    let url = \"http://localhost:9000/worldDB/countrylist\";\n    await fetch(url).then(response => {\n      return response.json();\n    }).then(data => {\n      let countryList = data.map(country => {\n        return {\n          value: country.Country,\n          display: country.Country\n        };\n      });\n      this.setState({\n        countryList: [{\n          value: '',\n          display: '-- Select a country --'\n        }].concat(countryList)\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  async loadCountryData() {\n    console.log('country data loaded');\n    let url = \"http://localhost:9000/worldDB/country?name=\" + this.state.selectedCountry;\n    await fetch(url).then(response => {\n      return response.json();\n    }).then(dataJson => {\n      this.setState({\n        totalRecovered: dataJson[0].TotalRecovered,\n        totalDeaths: dataJson[0].TotalDeaths,\n        totalConfirmed: dataJson[0].TotalConfirmed // countryData: dataJson,\n\n      });\n    }); // console.log(JSON.stringify(this.state.countryData));\n    // console.log(this.state.countryData[0].TotalDeaths);\n  }\n\n  handleDeathsChange(event) {\n    this.setState({\n      totalDeaths: event.target.value\n    });\n  }\n\n  handleRecoveredChange(event) {\n    this.setState({\n      totalRecovered: event.target.value\n    });\n  }\n\n  handleConfirmedChange(event) {\n    this.setState({\n      totalConfirmed: event.target.value\n    });\n  }\n\n  async updateCountryDataRequest() {\n    let url = \"http://localhost:9000/worldDB/country?name=\" + this.state.selectedCountry;\n    await fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        totalDeaths: this.state.totalDeaths,\n        totalRecovered: this.state.totalRecovered,\n        totalConfirmed: this.state.totalConfirmed\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(dataJson => {\n      console.log(Array.from(dataJson));\n      this.setState({\n        json: Array.from(dataJson)\n      }); // console.log(JSON.stringify(this.state.json));\n\n      return this.state.json;\n    }).catch(err => err);\n  }\n\n  async updateCountryData(event) {\n    event.preventDefault();\n    console.log(this.state.selectedCountry);\n    console.log(this.state.totalDeaths);\n    console.log(this.state.totalRecovered);\n    console.log(this.state.totalConfirmed);\n    await this.updateCountryDataRequest();\n    console.log(this.state.json);\n  }\n\n  async componentDidMount() {\n    // // pulls data from public api on refresh\n    // if (this.state.firstLoad) {\n    //     const url = \"https://api.covid19api.com/summary\";\n    //     const response = await fetch(url);\n    //     const data = await response.json();\n    //     this.setState({loading: false, json: data.Countries, firstLoad: false});\n    // }\n    await this.callDB();\n    await this.loadCountries();\n    this.setState({\n      loading: false\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 20\n        }\n      }, \"loading...\");\n    }\n\n    if (this.state.countryCode !== '') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.setState({\n          countryCode: ''\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 17\n        }\n      }, \"Back to World Chart\"), /*#__PURE__*/React.createElement(CountryChart, {\n        countryCode: this.state.countryCode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 17\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          padding: \"5%\",\n          marginTop: -50\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 20\n        }\n      }, this.findMax(this.bubbleChartData(this.state.json, 'TotalRecovered'), 'y')), /*#__PURE__*/React.createElement(VictoryChart, {\n        style: {\n          parent: {\n            maxWidth: \"70%\"\n          }\n        },\n        height: 400,\n        width: 500,\n        padding: 100,\n        theme: VictoryTheme.material,\n        animate: {\n          duration: 1000\n        },\n        domain: {\n          x: [0, this.findMax(this.bubbleChartData(this.state.json, 'TotalRecovered'), 'x') * 1.2],\n          y: [0, this.findMax(this.bubbleChartData(this.state.json, 'TotalRecovered'), 'y') * 1.2]\n        } // containerComponent={\n        //     <VictoryZoomVoronoiContainer \n        //         zoomDomain={{\n        //             x: [0, this.findMax(this.bubbleChartData(this.state.json, 'TotalRecovered'), 'x')*1.2],\n        //             y: [0, this.findMax(this.bubbleChartData(this.state.json, 'TotalRecovered'), 'y')*1.2]\n        //         }}\n        //         labels={({ datum }) => `${datum.country}: ${datum.amount} confirmed case(s)`}\n        //     />\n        // }\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(VictoryLabel, {\n        fontSize: 10,\n        x: 250,\n        y: 60,\n        textAnchor: \"middle\",\n        text: \"World: Total Deaths vs Recoveries per Country\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(VictoryAxis, {\n        style: sharedAxisStyles,\n        tickFormat: x => `${x / 1000}k`,\n        label: \"Total Recoveries\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(VictoryAxis, {\n        dependentAxis: true // tickFormat={(x, i, ticks) => (`${console.log(ticks)}`+`${x / 1000}k`)}\n        ,\n        tickFormat: (x, i, ticks) => `${x / 1000}k`,\n        label: \"Total Deaths\",\n        style: sharedAxisStyles,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(VictoryScatter, {\n        style: {\n          data: {\n            fill: \"#c43a31\",\n            opacity: \"50%\"\n          }\n        },\n        bubbleProperty: \"amount\",\n        maxBubbleSize: 20,\n        minBubbleSize: 1,\n        data: this.bubbleChartData(this.state.json, 'TotalRecovered'),\n        events: [{\n          target: 'data',\n          eventHandlers: {\n            onClick: (event, data) => {\n              let cCode = data.datum.countryCode;\n              console.log(cCode);\n              this.setState({\n                countryCode: cCode\n              });\n            }\n          }\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          minWidth: \"20%\",\n          marginTop: 80\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.handleRefresh,\n        style: {\n          margin: 10,\n          padding: 5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 25\n        }\n      }, \"Refresh\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.handleReset,\n        style: {\n          margin: 10,\n          padding: 5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 25\n        }\n      }, \"Reset\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"select\", {\n        style: {\n          padding: 3,\n          margin: 20\n        },\n        value: this.state.selectedCountry,\n        onChange: async e => {\n          await this.setState({\n            selectedCountry: e.target.value\n          });\n\n          if (this.state.selectedCountry !== '') {\n            this.loadCountryData();\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 29\n        }\n      }, \">\", console.log(this.state.selectedCountry), this.state.countryList.map(country => /*#__PURE__*/React.createElement(\"option\", {\n        key: country.value,\n        value: country.value,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 33\n        }\n      }, country.display)))), /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.updateCountryData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        style: {\n          width: 70,\n          float: 'left',\n          margin: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 33\n        }\n      }, \"Deaths:\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.totalDeaths,\n        onChange: this.handleDeathsChange,\n        style: {\n          margin: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        style: {\n          width: 70,\n          float: 'left',\n          margin: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 33\n        }\n      }, \"Recovered:\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.totalRecovered,\n        onChange: this.handleRecoveredChange,\n        style: {\n          margin: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        style: {\n          width: 70,\n          float: 'left',\n          margin: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 33\n        }\n      }, \"Confirmed:\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.totalConfirmed,\n        onChange: this.handleConfirmedChange,\n        style: {\n          margin: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Update\",\n        style: {\n          margin: 10,\n          float: 'right'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 30\n        }\n      })));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/i537493/Documents/covid19-datavis/client/src/components/WorldChartTest.js"],"names":["React","VictoryChart","VictoryAxis","VictoryTheme","VictoryLabel","VictoryScatter","createContainer","CountryChart","sharedAxisStyles","tickLabels","fontSize","axisLabel","padding","fontStyle","VictoryZoomVoronoiContainer","WorldChart","Component","constructor","props","state","loading","json","countryCode","firstLoad","countryList","value","display","selectedCountry","totalDeaths","totalRecovered","totalConfirmed","newCountryName","newTotalDeaths","newTotalRecovered","newTotalConfirmed","handleSubmit","bind","handleRefresh","handleReset","bubbleChartData","handleDeathsChange","handleRecoveredChange","handleConfirmedChange","updateCountryData","metric","array","bubbleData","map","obj","x","y","TotalDeaths","amount","TotalConfirmed","country","Country","CountryCode","event","preventDefault","callDB","fetch","then","res","setState","Array","from","catch","err","findMax","prop","maxObj","reduce","max","val","console","log","url","method","response","dataJson","loadCountries","data","concat","error","loadCountryData","TotalRecovered","target","updateCountryDataRequest","body","JSON","stringify","headers","componentDidMount","render","flexWrap","marginTop","parent","maxWidth","material","duration","i","ticks","fill","opacity","eventHandlers","onClick","cCode","datum","minWidth","margin","e","width","float"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACKC,YADL,EAEKC,WAFL,EAGKC,YAHL,EAIKC,YAJL,EAKKC,cALL,EAMKC,eANL,QAOW,SAPX;AAQA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,UAAU,EAAE;AACRC,IAAAA,QAAQ,EAAE;AADF,GADS;AAIrBC,EAAAA,SAAS,EAAE;AACPC,IAAAA,OAAO,EAAE,EADF;AAEPF,IAAAA,QAAQ,EAAE,EAFH;AAGPG,IAAAA,SAAS,EAAE;AAHJ;AAJU,CAAzB;AAWA,MAAMC,2BAA2B,GAAGR,eAAe,CAAC,MAAD,EAAS,SAAT,CAAnD;AAIA,eAAe,MAAMS,UAAN,SAAyBf,KAAK,CAACgB,SAA/B,CAAyC;AAGpDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACbC,MAAAA,OAAO,EAAE,IADI;AAEbC,MAAAA,IAAI,EAAE,EAFO;AAGbC,MAAAA,WAAW,EAAE,EAHA;AAIbC,MAAAA,SAAS,EAAE,IAJE;AAKbC,MAAAA,WAAW,EAAE,CAAC;AAACC,QAAAA,KAAK,EAAE,EAAR;AAAYC,QAAAA,OAAO,EAAE;AAArB,OAAD,CALA;AAMbC,MAAAA,eAAe,EAAE,EANJ;AAObC,MAAAA,WAAW,EAAE,EAPA;AAQbC,MAAAA,cAAc,EAAE,EARH;AASbC,MAAAA,cAAc,EAAE,EATH;AAUbC,MAAAA,cAAc,EAAE,EAVH;AAWbC,MAAAA,cAAc,EAAE,EAXH;AAYbC,MAAAA,iBAAiB,EAAE,EAZN;AAabC,MAAAA,iBAAiB,EAAE;AAbN,KAAb,CAFe,CAiBf;;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAiBF,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKG,eAAL,GAAuB,KAAKA,eAAL,CAAqBH,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKI,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBJ,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKK,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BL,IAA3B,CAAgC,IAAhC,CAA7B;AACA,SAAKM,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BN,IAA3B,CAAgC,IAAhC,CAA7B;AACA,SAAKO,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBP,IAAvB,CAA4B,IAA5B,CAAzB;AACH;;AAEDG,EAAAA,eAAe,CAAClB,IAAD,EAAOuB,MAAP,EAAe;AAC1B;AACA,QAAIC,KAAK,GAAGxB,IAAZ;AACA,QAAIyB,UAAU,GAAGD,KAAK,CAACE,GAAN,CAAUC,GAAG,KAAK;AAC/BC,MAAAA,CAAC,EAAED,GAAG,CAACJ,MAAD,CADyB;AAE/BM,MAAAA,CAAC,EAAEF,GAAG,CAACG,WAFwB;AAG/BC,MAAAA,MAAM,EAAEJ,GAAG,CAACK,cAHmB;AAI/BC,MAAAA,OAAO,EAAEN,GAAG,CAACO,OAJkB;AAK/BjC,MAAAA,WAAW,EAAE0B,GAAG,CAACQ;AALc,KAAL,CAAb,CAAjB,CAH0B,CAU1B;;AACA,WAAOV,UAAP;AACH,GA3CmD,CA6CpD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAX,EAAAA,YAAY,CAACsB,KAAD,EAAQ;AAChBA,IAAAA,KAAK,CAACC,cAAN;AACH;;AAED,QAAMC,MAAN,GAAe;AACX,UAAMC,KAAK,CAAC,+BAAD,CAAL,CACDC,IADC,CACIC,GAAG,IAAI;AACT,aAAOA,GAAG,CAACzC,IAAJ,EAAP;AACH,KAHC,EAGCwC,IAHD,CAGMxC,IAAI,IAAI;AACZ,WAAK0C,QAAL,CAAc;AAAC1C,QAAAA,IAAI,EAAE2C,KAAK,CAACC,IAAN,CAAW5C,IAAX;AAAP,OAAd;AACH,KALC,EAKC6C,KALD,CAKOC,GAAG,IAAIA,GALd,CAAN;AAMH;;AAEDC,EAAAA,OAAO,CAACvB,KAAD,EAAQwB,IAAR,EAAa;AAChB;AACI,QAAIC,MAAM,GAAGzB,KAAK,CAAC0B,MAAN,CAAa,CAACC,GAAD,EAAMC,GAAN,KAAcA,GAAG,CAACJ,IAAD,CAAH,GAAYG,GAAG,CAACH,IAAD,CAAf,GAAwBI,GAAxB,GAA8BD,GAAzD,CAAb;AACA,QAAIA,GAAG,GAAGF,MAAM,CAACD,IAAD,CAAhB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,WAAOA,GAAP,CALY,CAMhB;AACH;;AAED,QAAMlC,WAAN,CAAkBmB,KAAlB,EAAyB;AACrBA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAIkB,GAAG,GAAG,0CAAV;AACA,UAAMhB,KAAK,CAACgB,GAAD,EAAM;AACbC,MAAAA,MAAM,EAAE;AADK,KAAN,CAAL,CAEHhB,IAFG,CAEE,UAASiB,QAAT,EAAkB;AACtB,aAAOA,QAAQ,CAACzD,IAAT,EAAP;AACH,KAJK,EAIHwC,IAJG,CAIEkB,QAAQ,IAAI;AAChB,WAAKhB,QAAL,CAAc;AAAC1C,QAAAA,IAAI,EAAE2C,KAAK,CAACC,IAAN,CAAWc,QAAX;AAAP,OAAd;AACA,aAAO,KAAK5D,KAAL,CAAWE,IAAlB;AACH,KAPK,EAOH6C,KAPG,CAOGC,GAAG,IAAIA,GAPV,CAAN;AAQH;;AAED,QAAM9B,aAAN,CAAoBoB,KAApB,EAA2B;AACvBA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAIkB,GAAG,GAAG,+BAAV;AACA,UAAMhB,KAAK,CAACgB,GAAD,CAAL,CACLf,IADK,CACA,UAASiB,QAAT,EAAkB;AACpB,aAAOA,QAAQ,CAACzD,IAAT,EAAP;AACH,KAHK,EAGHwC,IAHG,CAGEkB,QAAQ,IAAI;AAChB,WAAKhB,QAAL,CAAc;AAAC1C,QAAAA,IAAI,EAAE2C,KAAK,CAACC,IAAN,CAAWc,QAAX;AAAP,OAAd;AACA,aAAO,KAAK5D,KAAL,CAAWE,IAAlB;AACH,KANK,EAMH6C,KANG,CAMGC,GAAG,IAAIA,GANV,CAAN;AAOH;;AAEF,QAAMa,aAAN,GAAsB;AACjB,QAAIJ,GAAG,GAAG,2CAAV;AACA,UAAMhB,KAAK,CAACgB,GAAD,CAAL,CACLf,IADK,CACCiB,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACzD,IAAT,EAAP;AACH,KAHK,EAGHwC,IAHG,CAGEoB,IAAI,IAAI;AACZ,UAAIzD,WAAW,GAAGyD,IAAI,CAAClC,GAAL,CAASO,OAAO,IAAI;AACpC,eAAO;AAAC7B,UAAAA,KAAK,EAAE6B,OAAO,CAACC,OAAhB;AAAyB7B,UAAAA,OAAO,EAAE4B,OAAO,CAACC;AAA1C,SAAP;AACD,OAFiB,CAAlB;AAGA,WAAKQ,QAAL,CAAc;AACZvC,QAAAA,WAAW,EAAE,CAAC;AAACC,UAAAA,KAAK,EAAE,EAAR;AAAYC,UAAAA,OAAO,EAAE;AAArB,SAAD,EAAiDwD,MAAjD,CAAwD1D,WAAxD;AADD,OAAd;AAGH,KAVK,EAUH0C,KAVG,CAUGiB,KAAK,IAAI;AACdT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACH,KAZK,CAAN;AAaH;;AAED,QAAMC,eAAN,GAAwB;AACpBV,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,QAAIC,GAAG,GAAG,gDAA8C,KAAKzD,KAAL,CAAWQ,eAAnE;AACA,UAAMiC,KAAK,CAACgB,GAAD,CAAL,CACLf,IADK,CACCiB,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACzD,IAAT,EAAP;AACH,KAHK,EAGHwC,IAHG,CAGEkB,QAAQ,IAAI;AAChB,WAAKhB,QAAL,CAAc;AACVlC,QAAAA,cAAc,EAAEkD,QAAQ,CAAC,CAAD,CAAR,CAAYM,cADlB;AAEVzD,QAAAA,WAAW,EAAEmD,QAAQ,CAAC,CAAD,CAAR,CAAY5B,WAFf;AAGVrB,QAAAA,cAAc,EAAEiD,QAAQ,CAAC,CAAD,CAAR,CAAY1B,cAHlB,CAIV;;AAJU,OAAd;AAMH,KAVK,CAAN,CAHoB,CAepB;AACA;AACH;;AAIDb,EAAAA,kBAAkB,CAACiB,KAAD,EAAO;AACrB,SAAKM,QAAL,CAAc;AAACnC,MAAAA,WAAW,EAAE6B,KAAK,CAAC6B,MAAN,CAAa7D;AAA3B,KAAd;AACH;;AACDgB,EAAAA,qBAAqB,CAACgB,KAAD,EAAO;AACxB,SAAKM,QAAL,CAAc;AAAClC,MAAAA,cAAc,EAAE4B,KAAK,CAAC6B,MAAN,CAAa7D;AAA9B,KAAd;AACH;;AACDiB,EAAAA,qBAAqB,CAACe,KAAD,EAAO;AACxB,SAAKM,QAAL,CAAc;AAACjC,MAAAA,cAAc,EAAE2B,KAAK,CAAC6B,MAAN,CAAa7D;AAA9B,KAAd;AACH;;AAGD,QAAM8D,wBAAN,GAAiC;AAC7B,QAAIX,GAAG,GAAG,gDAA8C,KAAKzD,KAAL,CAAWQ,eAAnE;AACA,UAAMiC,KAAK,CAACgB,GAAD,EAAM;AACbC,MAAAA,MAAM,EAAE,MADK;AAEbW,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjB9D,QAAAA,WAAW,EAAE,KAAKT,KAAL,CAAWS,WADP;AAEjBC,QAAAA,cAAc,EAAE,KAAKV,KAAL,CAAWU,cAFV;AAGjBC,QAAAA,cAAc,EAAE,KAAKX,KAAL,CAAWW;AAHV,OAAf,CAFO;AAOb6D,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAPI,KAAN,CAAL,CAQH9B,IARG,CAQE,UAASiB,QAAT,EAAkB;AACtB,aAAOA,QAAQ,CAACzD,IAAT,EAAP;AACH,KAVK,EAUHwC,IAVG,CAUEkB,QAAQ,IAAI;AAChBL,MAAAA,OAAO,CAACC,GAAR,CAAYX,KAAK,CAACC,IAAN,CAAWc,QAAX,CAAZ;AACA,WAAKhB,QAAL,CAAc;AAAC1C,QAAAA,IAAI,EAAE2C,KAAK,CAACC,IAAN,CAAWc,QAAX;AAAP,OAAd,EAFgB,CAGhB;;AACA,aAAO,KAAK5D,KAAL,CAAWE,IAAlB;AACH,KAfK,EAeH6C,KAfG,CAeGC,GAAG,IAAIA,GAfV,CAAN;AAgBH;;AAGD,QAAMxB,iBAAN,CAAwBc,KAAxB,EAA8B;AAC1BA,IAAAA,KAAK,CAACC,cAAN;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxD,KAAL,CAAWQ,eAAvB;AACA+C,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxD,KAAL,CAAWS,WAAvB;AACA8C,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxD,KAAL,CAAWU,cAAvB;AACA6C,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxD,KAAL,CAAWW,cAAvB;AACA,UAAM,KAAKyD,wBAAL,EAAN;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxD,KAAL,CAAWE,IAAvB;AACH;;AAID,QAAMuE,iBAAN,GAA0B;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAM,KAAKjC,MAAL,EAAN;AACA,UAAM,KAAKqB,aAAL,EAAN;AACA,SAAKjB,QAAL,CAAc;AAAC3C,MAAAA,OAAO,EAAE;AAAV,KAAd;AACH;;AAEDyE,EAAAA,MAAM,GAAG;AACL,QAAI,KAAK1E,KAAL,CAAWC,OAAf,EAAuB;AACnB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH;;AAED,QAAI,KAAKD,KAAL,CAAWG,WAAX,KAA2B,EAA/B,EAAkC;AAC9B,0BACI,uDACA;AAAQ,QAAA,OAAO,EAAG,MAAM,KAAKyC,QAAL,CAAc;AAACzC,UAAAA,WAAW,EAAE;AAAd,SAAd,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADA,eAGA,oBAAC,YAAD;AAAc,QAAA,WAAW,EAAE,KAAKH,KAAL,CAAWG,WAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHA,CADJ;AAOH,KARD,MAQO;AACH,0BACI;AAAK,QAAA,KAAK,EAAE;AAAEI,UAAAA,OAAO,EAAE,MAAX;AAAmBoE,UAAAA,QAAQ,EAAE,MAA7B;AAAqClF,UAAAA,OAAO,EAAE,IAA9C;AAAoDmF,UAAAA,SAAS,EAAE,CAAC;AAAhE,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAK3B,OAAL,CAAa,KAAK7B,eAAL,CAAqB,KAAKpB,KAAL,CAAWE,IAAhC,EAAsC,gBAAtC,CAAb,EAAsE,GAAtE,CAAN,CADH,eAEI,oBAAC,YAAD;AACI,QAAA,KAAK,EAAE;AAAE2E,UAAAA,MAAM,EAAE;AAAEC,YAAAA,QAAQ,EAAE;AAAZ;AAAV,SADX;AAEI,QAAA,MAAM,EAAE,GAFZ;AAGI,QAAA,KAAK,EAAE,GAHX;AAII,QAAA,OAAO,EAAE,GAJb;AAKI,QAAA,KAAK,EACD9F,YAAY,CAAC+F,QANrB;AAQI,QAAA,OAAO,EAAE;AACLC,UAAAA,QAAQ,EAAE;AADL,SARb;AAWI,QAAA,MAAM,EAAE;AACJlD,UAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,KAAKmB,OAAL,CAAa,KAAK7B,eAAL,CAAqB,KAAKpB,KAAL,CAAWE,IAAhC,EAAsC,gBAAtC,CAAb,EAAsE,GAAtE,IAA6E,GAAjF,CADC;AAEJ6B,UAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,KAAKkB,OAAL,CAAa,KAAK7B,eAAL,CAAqB,KAAKpB,KAAL,CAAWE,IAAhC,EAAsC,gBAAtC,CAAb,EAAsE,GAAtE,IAA6E,GAAjF;AAFC,SAXZ,CAeI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAyBI,oBAAC,YAAD;AACI,QAAA,QAAQ,EAAE,EADd;AAEI,QAAA,CAAC,EAAE,GAFP;AAGI,QAAA,CAAC,EAAE,EAHP;AAII,QAAA,UAAU,EAAC,QAJf;AAKI,QAAA,IAAI,EAAC,+CALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAzBJ,eAgCI,oBAAC,WAAD;AACI,QAAA,KAAK,EAAEb,gBADX;AAEI,QAAA,UAAU,EAAGyC,CAAD,IAAS,GAAEA,CAAC,GAAG,IAAK,GAFpC;AAGI,QAAA,KAAK,EAAC,kBAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhCJ,eAqCI,oBAAC,WAAD;AACI,QAAA,aAAa,MADjB,CAEI;AAFJ;AAGI,QAAA,UAAU,EAAE,CAACA,CAAD,EAAImD,CAAJ,EAAOC,KAAP,KAAmB,GAAEpD,CAAC,GAAG,IAAK,GAH9C;AAII,QAAA,KAAK,EAAC,cAJV;AAKI,QAAA,KAAK,EAAEzC,gBALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QArCJ,eA4CI,oBAAC,cAAD;AACI,QAAA,KAAK,EAAE;AAAEyE,UAAAA,IAAI,EAAE;AAAEqB,YAAAA,IAAI,EAAE,SAAR;AAAmBC,YAAAA,OAAO,EAAE;AAA5B;AAAR,SADX;AAEI,QAAA,cAAc,EAAC,QAFnB;AAGI,QAAA,aAAa,EAAE,EAHnB;AAII,QAAA,aAAa,EAAE,CAJnB;AAKI,QAAA,IAAI,EAAE,KAAKhE,eAAL,CAAqB,KAAKpB,KAAL,CAAWE,IAAhC,EAAsC,gBAAtC,CALV;AAMI,QAAA,MAAM,EAAE,CAAC;AACLiE,UAAAA,MAAM,EAAE,MADH;AAELkB,UAAAA,aAAa,EAAE;AACXC,YAAAA,OAAO,EAAE,CAAChD,KAAD,EAAQwB,IAAR,KAAiB;AACtB,kBAAIyB,KAAK,GAAGzB,IAAI,CAAC0B,KAAL,CAAWrF,WAAvB;AACAoD,cAAAA,OAAO,CAACC,GAAR,CAAY+B,KAAZ;AACA,mBAAK3C,QAAL,CAAc;AAACzC,gBAAAA,WAAW,EAAEoF;AAAd,eAAd;AACH;AALU;AAFV,SAAD,CANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA5CJ,CAFJ,eAiEI;AAAK,QAAA,KAAK,EAAE;AAACE,UAAAA,QAAQ,EAAE,KAAX;AAAkBb,UAAAA,SAAS,EAAE;AAA7B,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAQ,QAAA,OAAO,EAAE,KAAK1D,aAAtB;AAAqC,QAAA,KAAK,EAAE;AAACwE,UAAAA,MAAM,EAAE,EAAT;AAAajG,UAAAA,OAAO,EAAE;AAAtB,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,eAEI;AAAQ,QAAA,OAAO,EAAE,KAAK0B,WAAtB;AAAmC,QAAA,KAAK,EAAE;AAACuE,UAAAA,MAAM,EAAE,EAAT;AAAajG,UAAAA,OAAO,EAAE;AAAtB,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AACI,QAAA,KAAK,EAAE;AAACA,UAAAA,OAAO,EAAC,CAAT;AAAYiG,UAAAA,MAAM,EAAE;AAApB,SADX;AAEI,QAAA,KAAK,EAAE,KAAK1F,KAAL,CAAWQ,eAFtB;AAGI,QAAA,QAAQ,EAAE,MAAMmF,CAAN,IAAY;AAClB,gBAAM,KAAK/C,QAAL,CAAc;AAACpC,YAAAA,eAAe,EAAEmF,CAAC,CAACxB,MAAF,CAAS7D;AAA3B,WAAd,CAAN;;AACA,cAAI,KAAKN,KAAL,CAAWQ,eAAX,KAA+B,EAAnC,EAAsC;AAClC,iBAAKyD,eAAL;AACH;AACJ,SARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAUKV,OAAO,CAACC,GAAR,CAAY,KAAKxD,KAAL,CAAWQ,eAAvB,CAVL,EAWK,KAAKR,KAAL,CAAWK,WAAX,CAAuBuB,GAAvB,CAA4BO,OAAD,iBAC5B;AAAQ,QAAA,GAAG,EAAEA,OAAO,CAAC7B,KAArB;AAA4B,QAAA,KAAK,EAAE6B,OAAO,CAAC7B,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmD6B,OAAO,CAAC5B,OAA3D,CADC,CAXL,CADJ,CAHJ,eAoBI;AAAM,QAAA,QAAQ,EAAE,KAAKiB,iBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAO,QAAA,KAAK,EAAE;AAACoE,UAAAA,KAAK,EAAE,EAAR;AAAYC,UAAAA,KAAK,EAAE,MAAnB;AAA2BH,UAAAA,MAAM,EAAE;AAAnC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,eAII;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAE,KAAK1F,KAAL,CAAWS,WAArC;AAAkD,QAAA,QAAQ,EAAE,KAAKY,kBAAjE;AAAqF,QAAA,KAAK,EAAE;AAACqE,UAAAA,MAAM,EAAE;AAAT,SAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CADJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAO,QAAA,KAAK,EAAE;AAACE,UAAAA,KAAK,EAAE,EAAR;AAAYC,UAAAA,KAAK,EAAE,MAAnB;AAA2BH,UAAAA,MAAM,EAAE;AAAnC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAII;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAE,KAAK1F,KAAL,CAAWU,cAArC;AAAqD,QAAA,QAAQ,EAAE,KAAKY,qBAApE;AAA2F,QAAA,KAAK,EAAE;AAACoE,UAAAA,MAAM,EAAE;AAAT,SAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CAPJ,eAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAO,QAAA,KAAK,EAAE;AAACE,UAAAA,KAAK,EAAE,EAAR;AAAYC,UAAAA,KAAK,EAAE,MAAnB;AAA2BH,UAAAA,MAAM,EAAE;AAAnC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAII;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAE,KAAK1F,KAAL,CAAWW,cAArC;AAAqD,QAAA,QAAQ,EAAE,KAAKY,qBAApE;AAA2F,QAAA,KAAK,EAAE;AAACmE,UAAAA,MAAM,EAAE;AAAT,SAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CAbJ,eAoBI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC,QAA3B;AAAoC,QAAA,KAAK,EAAE;AAACA,UAAAA,MAAM,EAAE,EAAT;AAAaG,UAAAA,KAAK,EAAE;AAApB,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QApBJ,CApBJ,eA0CI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA1CJ,eA0CS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA1CT,CAjEJ,CADJ;AAgHH;AACJ;;AAlUmD","sourcesContent":["import React from 'react';\nimport {\n     VictoryChart,\n     VictoryAxis, \n     VictoryTheme, \n     VictoryLabel,\n     VictoryScatter,\n     createContainer,\n    } from 'victory';\nimport CountryChart from './CountryChart'\n\nconst sharedAxisStyles = {\n    tickLabels: {\n        fontSize: 10\n    },\n    axisLabel: {\n        padding: 45,\n        fontSize: 10,\n        fontStyle: \"italic\"\n    }\n    };\n\nconst VictoryZoomVoronoiContainer = createContainer(\"zoom\", \"voronoi\");\n    \n\n\nexport default class WorldChart extends React.Component {\n    \n\n    constructor(props) {\n        super(props);\n        this.state = {\n        loading: true,\n        json: {},\n        countryCode: '',\n        firstLoad: true,\n        countryList: [{value: '', display: '-- Select a country --'}],\n        selectedCountry: '',\n        totalDeaths: '',\n        totalRecovered: '',\n        totalConfirmed: '',\n        newCountryName: '',\n        newTotalDeaths: '',\n        newTotalRecovered: '',\n        newTotalConfirmed: '',\n    };\n        // this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleRefresh = this.handleRefresh.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n        this.bubbleChartData = this.bubbleChartData.bind(this);\n        this.handleDeathsChange = this.handleDeathsChange.bind(this);\n        this.handleRecoveredChange = this.handleRecoveredChange.bind(this);\n        this.handleConfirmedChange = this.handleConfirmedChange.bind(this);\n        this.updateCountryData = this.updateCountryData.bind(this);\n    }\n\n    bubbleChartData(json, metric) {\n        // console.log(JSON.stringify(json[0]));\n        let array = json;\n        let bubbleData = array.map(obj => ({\n            x: obj[metric],\n            y: obj.TotalDeaths,  \n            amount: obj.TotalConfirmed, \n            country: obj.Country,\n            countryCode: obj.CountryCode\n        }));\n        // console.log(bubbleData);\n        return bubbleData;\n    }\n\n    // handleChange(event) {\n    //     this.setState({\n    //         countryCode: event.target.value\n    //     });\n    //     console.log(event.target.value);\n    //     console.log(this.state.countryCode);\n    // }\n\n    handleSubmit(event) {\n        event.preventDefault();\n    }\n\n    async callDB() {\n        await fetch(\"http://localhost:9000/worldDB\")\n            .then(res => {\n                return res.json();\n            }).then(json => {\n                this.setState({json: Array.from(json)});\n            }).catch(err => err);\n    }\n\n    findMax(array, prop){\n        // if (array.length !== 0){\n            let maxObj = array.reduce((max, val) => val[prop] > max[prop] ? val : max);\n            let max = maxObj[prop];\n            console.log(max);\n            return max;\n        // }\n    }\n\n    async handleReset(event) {\n        event.preventDefault();\n        let url = \"http://localhost:9000/worldDB?reset=true\"\n        await fetch(url, {\n            method: 'POST'\n        }).then(function(response){\n            return response.json();\n        }).then(dataJson => {\n            this.setState({json: Array.from(dataJson)});\n            return this.state.json\n        }).catch(err => err);\n    }\n\n    async handleRefresh(event) {\n        event.preventDefault();\n        let url = \"http://localhost:9000/worldDB\";\n        await fetch(url)\n        .then(function(response){\n            return response.json();\n        }).then(dataJson => {\n            this.setState({json: Array.from(dataJson)});\n            return this.state.json\n        }).catch(err => err);\n    }\n\n   async loadCountries() {\n        let url = \"http://localhost:9000/worldDB/countrylist\";\n        await fetch(url)\n        .then((response) => {\n            return response.json();\n        }).then(data => {\n            let countryList = data.map(country => {\n              return {value: country.Country, display: country.Country}\n            });\n            this.setState({\n              countryList: [{value: '', display: '-- Select a country --'}].concat(countryList)\n            });\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    async loadCountryData() {\n        console.log('country data loaded');\n        let url = \"http://localhost:9000/worldDB/country?name=\"+this.state.selectedCountry;\n        await fetch(url)\n        .then((response) => {\n            return response.json();\n        }).then(dataJson => {\n            this.setState({\n                totalRecovered: dataJson[0].TotalRecovered,\n                totalDeaths: dataJson[0].TotalDeaths,\n                totalConfirmed: dataJson[0].TotalConfirmed,\n                // countryData: dataJson,\n            })\n        })\n        \n        // console.log(JSON.stringify(this.state.countryData));\n        // console.log(this.state.countryData[0].TotalDeaths);\n    }\n\n    \n\n    handleDeathsChange(event){\n        this.setState({totalDeaths: event.target.value});\n    }\n    handleRecoveredChange(event){\n        this.setState({totalRecovered: event.target.value});\n    }\n    handleConfirmedChange(event){\n        this.setState({totalConfirmed: event.target.value});\n    }\n\n\n    async updateCountryDataRequest() {\n        let url = \"http://localhost:9000/worldDB/country?name=\"+this.state.selectedCountry;\n        await fetch(url, {\n            method: 'POST',\n            body: JSON.stringify({\n                totalDeaths: this.state.totalDeaths,\n                totalRecovered: this.state.totalRecovered,\n                totalConfirmed: this.state.totalConfirmed,\n            }),\n            headers: {\"Content-Type\": \"application/json\"}\n        }).then(function(response){\n            return response.json();\n        }).then(dataJson => {\n            console.log(Array.from(dataJson));\n            this.setState({json: Array.from(dataJson)});\n            // console.log(JSON.stringify(this.state.json));\n            return this.state.json\n        }).catch(err => err);\n    }\n\n    \n    async updateCountryData(event){\n        event.preventDefault();\n        console.log(this.state.selectedCountry);\n        console.log(this.state.totalDeaths);\n        console.log(this.state.totalRecovered);\n        console.log(this.state.totalConfirmed);\n        await this.updateCountryDataRequest();\n        console.log(this.state.json);\n    }\n\n    \n\n    async componentDidMount() {\n        // // pulls data from public api on refresh\n        // if (this.state.firstLoad) {\n        //     const url = \"https://api.covid19api.com/summary\";\n        //     const response = await fetch(url);\n        //     const data = await response.json();\n        //     this.setState({loading: false, json: data.Countries, firstLoad: false});\n        // }\n        await this.callDB();\n        await this.loadCountries();\n        this.setState({loading: false});\n    }\n\n    render() {\n        if (this.state.loading){\n            return(<div>loading...</div>);\n        }\n\n        if (this.state.countryCode !== ''){\n            return(\n                <>\n                <button onClick= {() => this.setState({countryCode: ''})}>Back to World Chart</button>\n\n                <CountryChart countryCode={this.state.countryCode}/>\n                </>\n            );\n        } else {\n            return (\n                <div style={{ display: \"flex\", flexWrap: \"wrap\", padding: \"5%\", marginTop: -50 }}>\n                   <div>{this.findMax(this.bubbleChartData(this.state.json, 'TotalRecovered'), 'y')}</div>\n                    <VictoryChart\n                        style={{ parent: { maxWidth: \"70%\" }}}\n                        height={400}\n                        width={500}\n                        padding={100}\n                        theme={\n                            VictoryTheme.material\n                        }\n                        animate={{\n                            duration: 1000\n                        }}\n                        domain={{\n                            x: [0, this.findMax(this.bubbleChartData(this.state.json, 'TotalRecovered'), 'x') * 1.2],\n                            y: [0, this.findMax(this.bubbleChartData(this.state.json, 'TotalRecovered'), 'y') * 1.2]\n                        }}\n                        // containerComponent={\n                        //     <VictoryZoomVoronoiContainer \n                        //         zoomDomain={{\n                        //             x: [0, this.findMax(this.bubbleChartData(this.state.json, 'TotalRecovered'), 'x')*1.2],\n                        //             y: [0, this.findMax(this.bubbleChartData(this.state.json, 'TotalRecovered'), 'y')*1.2]\n                        //         }}\n                        //         labels={({ datum }) => `${datum.country}: ${datum.amount} confirmed case(s)`}\n                        //     />\n                        // }\n                    >   \n                        <VictoryLabel\n                            fontSize={10}\n                            x={250}\n                            y={60}\n                            textAnchor=\"middle\"\n                            text=\"World: Total Deaths vs Recoveries per Country\"\n                        />\n                        <VictoryAxis\n                            style={sharedAxisStyles}\n                            tickFormat={(x) => (`${x / 1000}k`)}\n                            label=\"Total Recoveries\"\n                        ></VictoryAxis>\n                        <VictoryAxis\n                            dependentAxis\n                            // tickFormat={(x, i, ticks) => (`${console.log(ticks)}`+`${x / 1000}k`)}\n                            tickFormat={(x, i, ticks) => (`${x / 1000}k`)}\n                            label=\"Total Deaths\"\n                            style={sharedAxisStyles}\n                        ></VictoryAxis>\n                        <VictoryScatter\n                            style={{ data: { fill: \"#c43a31\", opacity: \"50%\" } }}\n                            bubbleProperty=\"amount\"\n                            maxBubbleSize={20}\n                            minBubbleSize={1}\n                            data={this.bubbleChartData(this.state.json, 'TotalRecovered')}\n                            events={[{\n                                target: 'data',\n                                eventHandlers: {\n                                    onClick: (event, data) => {\n                                        let cCode = data.datum.countryCode\n                                        console.log(cCode);\n                                        this.setState({countryCode: cCode});\n                                    },\n                                },\n                            }]}\n                        >\n                        </VictoryScatter>\n                    </VictoryChart>\n                    <div style={{minWidth: \"20%\", marginTop: 80}}>\n                        <button onClick={this.handleRefresh} style={{margin: 10, padding: 5}}>Refresh</button>\n                        <button onClick={this.handleReset} style={{margin: 10, padding: 5}}>Reset</button>\n                        <div>\n                            <select \n                                style={{padding:3, margin: 20}}\n                                value={this.state.selectedCountry}\n                                onChange={async(e) => {\n                                    await this.setState({selectedCountry: e.target.value});\n                                    if (this.state.selectedCountry !== ''){\n                                        this.loadCountryData();\n                                    }\n                                }}>\n                            >\n                                {console.log(this.state.selectedCountry)}\n                                {this.state.countryList.map((country) => \n                                <option key={country.value} value={country.value}>{country.display}</option>\n                                )}\n                            </select>\n                        </div>\n                        <form onSubmit={this.updateCountryData}>\n                            <div>\n                                <label style={{width: 70, float: 'left', margin: 10}}>\n                                    Deaths:  \n                                </label>\n                                <input type=\"text\" value={this.state.totalDeaths} onChange={this.handleDeathsChange} style={{margin: 10}}/>\n                            </div>\n                            <div>\n                                <label style={{width: 70, float: 'left', margin: 10}}>\n                                    Recovered:\n                                </label>\n                                <input type=\"text\" value={this.state.totalRecovered} onChange={this.handleRecoveredChange} style={{margin: 10}}/>\n                            </div>\n                            <div>\n                                <label style={{width: 70, float: 'left', margin: 10}}>\n                                    Confirmed:\n                                </label>\n                                <input type=\"text\" value={this.state.totalConfirmed} onChange={this.handleConfirmedChange} style={{margin: 10}}/>\n                            </div>\n                            \n                            <input type=\"submit\" value=\"Update\" style={{margin: 10, float: 'right'}}/>\n                        </form>\n                        <br/><br/>\n                    </div>\n                </div>\n            ); \n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}