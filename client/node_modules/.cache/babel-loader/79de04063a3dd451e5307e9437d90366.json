{"ast":null,"code":"var _jsxFileName = \"/Users/i537493/Documents/covid19-datavis/client/src/components/WorldChart.js\";\nimport React from 'react';\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLabel, VictoryScatter, createContainer } from 'victory';\nimport CountryChart from './CountryChart';\nconst sharedAxisStyles = {\n  tickLabels: {\n    fontSize: 10\n  },\n  axisLabel: {\n    padding: 45,\n    fontSize: 10,\n    fontStyle: \"italic\"\n  }\n};\nconst VictoryZoomVoronoiContainer = createContainer(\"zoom\", \"voronoi\");\n\nfunction bubbleChartData(json, metric) {\n  // let array = Array.from(json);\n  let array = json.Countries;\n  let bubbleData = array.map(obj => ({\n    x: obj[metric],\n    y: obj.TotalDeaths,\n    amount: obj.TotalConfirmed,\n    country: obj.Country,\n    countryCode: obj.CountryCode\n  }));\n  return bubbleData;\n}\n\nexport default class WorldChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      json: {},\n      countryCode: '',\n      firstLoad: true\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      countryCode: event.target.value\n    });\n    console.log(event.target.value);\n    console.log(this.state.countryCode);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  callDB() {\n    fetch(\"http://localhost:9000/worldDB\").then(res => {\n      return res.json();\n    }).then(json => {\n      this.setState({\n        json: json\n      });\n    }).catch(err => err);\n  }\n\n  findMax(array, prop) {\n    if (array.length !== 0) {\n      let maxObj = array.reduce((max, val) => val[prop] > max[prop] ? val : max);\n      let max = maxObj[prop];\n      return max;\n    }\n  }\n\n  async componentDidMount() {\n    if (firstLoad) {\n      const url = \"https://api.covid19api.com/summary\";\n      const response = await fetch(url);\n      const data = await response.json();\n    } // console.log(data);\n    // const data = await this.callDB();\n\n\n    this.setState({\n      loading: false,\n      json: data\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 20\n        }\n      }, \"loading...\");\n    }\n\n    if (this.state.countryCode !== '') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.setState({\n          countryCode: ''\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }\n      }, \"Back to World Chart\"), /*#__PURE__*/React.createElement(CountryChart, {\n        countryCode: this.state.countryCode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          paddingLeft: '15%',\n          marginTop: -50\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(VictoryChart, {\n        style: {\n          parent: {\n            maxWidth: \"80%\"\n          }\n        },\n        height: 400,\n        width: 500,\n        padding: 100,\n        theme: VictoryTheme.material,\n        animate: {\n          duration: 10000\n        },\n        domain: {\n          x: [0, this.findMax(bubbleChartData(this.state.json, 'TotalRecovered'), 'x') * 1.2],\n          y: [0, this.findMax(bubbleChartData(this.state.json, 'TotalRecovered'), 'y') * 1.2]\n        },\n        containerComponent: /*#__PURE__*/React.createElement(VictoryZoomVoronoiContainer, {\n          zoomDomain: {\n            x: [0, 801000],\n            y: [0, 130000]\n          },\n          labels: ({\n            datum\n          }) => `${datum.country}: ${datum.amount} confirmed case(s)`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 29\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(VictoryLabel, {\n        fontSize: 10,\n        x: 250,\n        y: 60,\n        textAnchor: \"middle\",\n        text: \"World: Total Deaths vs Recoveries per Country\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(VictoryAxis, {\n        style: sharedAxisStyles,\n        tickFormat: x => `${x / 1000}k`,\n        label: \"Total Recoveries\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(VictoryAxis, {\n        dependentAxis: true,\n        tickFormat: x => `${x / 1000}k`,\n        label: \"Total Deaths\",\n        style: sharedAxisStyles,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(VictoryScatter, {\n        style: {\n          data: {\n            fill: \"#c43a31\",\n            opacity: \"50%\"\n          }\n        },\n        bubbleProperty: \"amount\",\n        maxBubbleSize: 20,\n        minBubbleSize: 1,\n        data: bubbleChartData(this.state.json, 'TotalRecovered'),\n        events: [{\n          target: 'data',\n          eventHandlers: {\n            onClick: (event, data) => {\n              let cCode = data.datum.countryCode;\n              console.log(cCode);\n              this.setState({\n                countryCode: cCode\n              });\n            }\n          }\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 25\n        }\n      })));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/i537493/Documents/covid19-datavis/client/src/components/WorldChart.js"],"names":["React","VictoryChart","VictoryAxis","VictoryTheme","VictoryLabel","VictoryScatter","createContainer","CountryChart","sharedAxisStyles","tickLabels","fontSize","axisLabel","padding","fontStyle","VictoryZoomVoronoiContainer","bubbleChartData","json","metric","array","Countries","bubbleData","map","obj","x","y","TotalDeaths","amount","TotalConfirmed","country","Country","countryCode","CountryCode","WorldChart","Component","constructor","props","state","loading","firstLoad","handleChange","bind","handleSubmit","event","setState","target","value","console","log","preventDefault","callDB","fetch","then","res","catch","err","findMax","prop","length","maxObj","reduce","max","val","componentDidMount","url","response","data","render","display","flexWrap","paddingLeft","marginTop","parent","maxWidth","material","duration","datum","fill","opacity","eventHandlers","onClick","cCode"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACKC,YADL,EAEKC,WAFL,EAGKC,YAHL,EAIKC,YAJL,EAKKC,cALL,EAMKC,eANL,QAOW,SAPX;AAQA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,UAAU,EAAE;AACRC,IAAAA,QAAQ,EAAE;AADF,GADS;AAIrBC,EAAAA,SAAS,EAAE;AACPC,IAAAA,OAAO,EAAE,EADF;AAEPF,IAAAA,QAAQ,EAAE,EAFH;AAGPG,IAAAA,SAAS,EAAE;AAHJ;AAJU,CAAzB;AAWA,MAAMC,2BAA2B,GAAGR,eAAe,CAAC,MAAD,EAAS,SAAT,CAAnD;;AAEA,SAASS,eAAT,CAAyBC,IAAzB,EAA+BC,MAA/B,EAAuC;AACnC;AACA,MAAIC,KAAK,GAAGF,IAAI,CAACG,SAAjB;AACA,MAAIC,UAAU,GAAGF,KAAK,CAACG,GAAN,CAAUC,GAAG,KAAK;AAC/BC,IAAAA,CAAC,EAAED,GAAG,CAACL,MAAD,CADyB;AAE/BO,IAAAA,CAAC,EAAEF,GAAG,CAACG,WAFwB;AAG/BC,IAAAA,MAAM,EAAEJ,GAAG,CAACK,cAHmB;AAI/BC,IAAAA,OAAO,EAAEN,GAAG,CAACO,OAJkB;AAK/BC,IAAAA,WAAW,EAAER,GAAG,CAACS;AALc,GAAL,CAAb,CAAjB;AAOA,SAAOX,UAAP;AACH;;AAGD,eAAe,MAAMY,UAAN,SAAyBhC,KAAK,CAACiC,SAA/B,CAAyC;AAGpDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACbC,MAAAA,OAAO,EAAE,IADI;AAEbrB,MAAAA,IAAI,EAAE,EAFO;AAGbc,MAAAA,WAAW,EAAG,EAHD;AAIbQ,MAAAA,SAAS,EAAE;AAJE,KAAb;AAMA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AAEDD,EAAAA,YAAY,CAACG,KAAD,EAAQ;AACZ,SAAKC,QAAL,CAAc;AACVb,MAAAA,WAAW,EAAEY,KAAK,CAACE,MAAN,CAAaC;AADhB,KAAd;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACE,MAAN,CAAaC,KAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,KAAL,CAAWN,WAAvB;AACP;;AAEDW,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAChBA,IAAAA,KAAK,CAACM,cAAN;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACLC,IAAAA,KAAK,CAAC,+BAAD,CAAL,CACKC,IADL,CACUC,GAAG,IAAI;AACT,aAAOA,GAAG,CAACpC,IAAJ,EAAP;AACH,KAHL,EAGOmC,IAHP,CAGYnC,IAAI,IAAI;AACZ,WAAK2B,QAAL,CAAc;AAAC3B,QAAAA,IAAI,EAAEA;AAAP,OAAd;AACH,KALL,EAKOqC,KALP,CAKaC,GAAG,IAAIA,GALpB;AAMH;;AAEDC,EAAAA,OAAO,CAACrC,KAAD,EAAQsC,IAAR,EAAa;AAChB,QAAItC,KAAK,CAACuC,MAAN,KAAiB,CAArB,EAAuB;AACnB,UAAIC,MAAM,GAAGxC,KAAK,CAACyC,MAAN,CAAa,CAACC,GAAD,EAAMC,GAAN,KAAcA,GAAG,CAACL,IAAD,CAAH,GAAYI,GAAG,CAACJ,IAAD,CAAf,GAAwBK,GAAxB,GAA8BD,GAAzD,CAAb;AACA,UAAIA,GAAG,GAAGF,MAAM,CAACF,IAAD,CAAhB;AACA,aAAOI,GAAP;AACH;AACJ;;AAED,QAAME,iBAAN,GAA0B;AACtB,QAAIxB,SAAJ,EAAe;AACX,YAAMyB,GAAG,GAAG,oCAAZ;AACA,YAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACa,GAAD,CAA5B;AACA,YAAME,IAAI,GAAG,MAAMD,QAAQ,CAAChD,IAAT,EAAnB;AACH,KALqB,CAOtB;AACA;;;AACA,SAAK2B,QAAL,CAAc;AAACN,MAAAA,OAAO,EAAE,KAAV;AAAiBrB,MAAAA,IAAI,EAAEiD;AAAvB,KAAd;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAI,KAAK9B,KAAL,CAAWC,OAAf,EAAuB;AACnB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH;;AAED,QAAI,KAAKD,KAAL,CAAWN,WAAX,KAA2B,EAA/B,EAAkC;AAC9B,0BACI,uDACA;AAAQ,QAAA,OAAO,EAAG,MAAM,KAAKa,QAAL,CAAc;AAACb,UAAAA,WAAW,EAAE;AAAd,SAAd,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADA,eASA,oBAAC,YAAD;AAAc,QAAA,WAAW,EAAE,KAAKM,KAAL,CAAWN,WAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATA,CADJ;AAaH,KAdD,MAcO;AACH,0BACI;AAAK,QAAA,KAAK,EAAE;AAAEqC,UAAAA,OAAO,EAAE,MAAX;AAAmBC,UAAAA,QAAQ,EAAE,MAA7B;AAAqCC,UAAAA,WAAW,EAAE,KAAlD;AAAyDC,UAAAA,SAAS,EAAE,CAAC;AAArE,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,YAAD;AACI,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAEC,YAAAA,QAAQ,EAAE;AAAZ;AAAV,SADX;AAEI,QAAA,MAAM,EAAE,GAFZ;AAGI,QAAA,KAAK,EAAE,GAHX;AAII,QAAA,OAAO,EAAE,GAJb;AAKI,QAAA,KAAK,EACDrE,YAAY,CAACsE,QANrB;AAQI,QAAA,OAAO,EAAE;AACLC,UAAAA,QAAQ,EAAE;AADL,SARb;AAWI,QAAA,MAAM,EAAE;AACJnD,UAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,KAAKgC,OAAL,CAAaxC,eAAe,CAAC,KAAKqB,KAAL,CAAWpB,IAAZ,EAAkB,gBAAlB,CAA5B,EAAiE,GAAjE,IAAwE,GAA5E,CADC;AAEJQ,UAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,KAAK+B,OAAL,CAAaxC,eAAe,CAAC,KAAKqB,KAAL,CAAWpB,IAAZ,EAAkB,gBAAlB,CAA5B,EAAiE,GAAjE,IAAwE,GAA5E;AAFC,SAXZ;AAeI,QAAA,kBAAkB,eACd,oBAAC,2BAAD;AACI,UAAA,UAAU,EAAE;AAACO,YAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,MAAJ,CAAJ;AAAiBC,YAAAA,CAAC,EAAE,CAAC,CAAD,EAAI,MAAJ;AAApB,WADhB;AAEI,UAAA,MAAM,EAAE,CAAC;AAAEmD,YAAAA;AAAF,WAAD,KAAgB,GAAEA,KAAK,CAAC/C,OAAQ,KAAI+C,KAAK,CAACjD,MAAO,oBAF7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAhBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAsBI,oBAAC,YAAD;AACI,QAAA,QAAQ,EAAE,EADd;AAEI,QAAA,CAAC,EAAE,GAFP;AAGI,QAAA,CAAC,EAAE,EAHP;AAII,QAAA,UAAU,EAAC,QAJf;AAKI,QAAA,IAAI,EAAC,+CALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAtBJ,eA6BI,oBAAC,WAAD;AACI,QAAA,KAAK,EAAElB,gBADX;AAEI,QAAA,UAAU,EAAGe,CAAD,IAAS,GAAEA,CAAC,GAAG,IAAK,GAFpC;AAGI,QAAA,KAAK,EAAC,kBAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA7BJ,eAkCI,oBAAC,WAAD;AACI,QAAA,aAAa,MADjB;AAEI,QAAA,UAAU,EAAGA,CAAD,IAAS,GAAEA,CAAC,GAAG,IAAK,GAFpC;AAGI,QAAA,KAAK,EAAC,cAHV;AAII,QAAA,KAAK,EAAEf,gBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAlCJ,eAwCI,oBAAC,cAAD;AACI,QAAA,KAAK,EAAE;AAAEyD,UAAAA,IAAI,EAAE;AAAEW,YAAAA,IAAI,EAAE,SAAR;AAAmBC,YAAAA,OAAO,EAAE;AAA5B;AAAR,SADX;AAEI,QAAA,cAAc,EAAC,QAFnB;AAGI,QAAA,aAAa,EAAE,EAHnB;AAII,QAAA,aAAa,EAAE,CAJnB;AAKI,QAAA,IAAI,EAAE9D,eAAe,CAAC,KAAKqB,KAAL,CAAWpB,IAAZ,EAAkB,gBAAlB,CALzB;AAMI,QAAA,MAAM,EAAE,CAAC;AACL4B,UAAAA,MAAM,EAAE,MADH;AAELkC,UAAAA,aAAa,EAAE;AACXC,YAAAA,OAAO,EAAE,CAACrC,KAAD,EAAQuB,IAAR,KAAiB;AACtB,kBAAIe,KAAK,GAAGf,IAAI,CAACU,KAAL,CAAW7C,WAAvB;AACAgB,cAAAA,OAAO,CAACC,GAAR,CAAYiC,KAAZ;AACA,mBAAKrC,QAAL,CAAc;AAACb,gBAAAA,WAAW,EAAEkD;AAAd,eAAd;AACH;AALU;AAFV,SAAD,CANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAxCJ,CADJ,CADJ;AA+DH;AACJ;;AA5ImD","sourcesContent":["import React from 'react';\nimport {\n     VictoryChart,\n     VictoryAxis, \n     VictoryTheme, \n     VictoryLabel,\n     VictoryScatter,\n     createContainer,\n    } from 'victory';\nimport CountryChart from './CountryChart'\n\nconst sharedAxisStyles = {\n    tickLabels: {\n        fontSize: 10\n    },\n    axisLabel: {\n        padding: 45,\n        fontSize: 10,\n        fontStyle: \"italic\"\n    }\n    };\n\nconst VictoryZoomVoronoiContainer = createContainer(\"zoom\", \"voronoi\");\n    \nfunction bubbleChartData(json, metric) {\n    // let array = Array.from(json);\n    let array = json.Countries\n    let bubbleData = array.map(obj => ({\n        x: obj[metric],\n        y: obj.TotalDeaths,  \n        amount: obj.TotalConfirmed, \n        country: obj.Country,\n        countryCode: obj.CountryCode\n    }));\n    return bubbleData;\n}\n\n\nexport default class WorldChart extends React.Component {\n    \n\n    constructor(props) {\n        super(props);\n        this.state = {\n        loading: true,\n        json: {},\n        countryCode : '',\n        firstLoad: true,\n    };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n            this.setState({\n                countryCode: event.target.value\n            });\n            console.log(event.target.value);\n            console.log(this.state.countryCode);\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n    }\n\n    callDB() {\n        fetch(\"http://localhost:9000/worldDB\")\n            .then(res => {\n                return res.json();\n            }).then(json => {\n                this.setState({json: json});\n            }).catch(err => err);\n    }\n\n    findMax(array, prop){\n        if (array.length !== 0){\n            let maxObj = array.reduce((max, val) => val[prop] > max[prop] ? val : max);\n            let max = maxObj[prop];\n            return max;\n        }\n    }\n\n    async componentDidMount() {\n        if (firstLoad) {\n            const url = \"https://api.covid19api.com/summary\";\n            const response = await fetch(url);\n            const data = await response.json();\n        }\n\n        // console.log(data);\n        // const data = await this.callDB();\n        this.setState({loading: false, json: data});\n    }\n\n    render() {\n        if (this.state.loading){\n            return(<div>loading...</div>);\n        }\n\n        if (this.state.countryCode !== ''){\n            return(\n                <>\n                <button onClick= {() => this.setState({countryCode: ''})}>Back to World Chart</button>\n                {/* <form style={{paddingLeft: '55%', marginBottom: '-10px'}} onSubmit={this.handleSubmit}>\n                <select value={this.state.countryCode} onChange={this.handleChange}>\n                    <option value={this.state.countryCode}>{this.state.countryCode}</option>\n                    <option value=\"fr\">France</option>\n                    <option value=\"br\">Brazil</option>\n                </select>\n                </form> */}\n                <CountryChart countryCode={this.state.countryCode}/>\n                </>\n            );\n        } else {\n            return (\n                <div style={{ display: \"flex\", flexWrap: \"wrap\", paddingLeft: '15%', marginTop: -50 }}>\n                    <VictoryChart\n                        style={{ parent: { maxWidth: \"80%\" } }}\n                        height={400}\n                        width={500}\n                        padding={100}\n                        theme={\n                            VictoryTheme.material\n                        }\n                        animate={{\n                            duration: 10000\n                        }}\n                        domain={{\n                            x: [0, this.findMax(bubbleChartData(this.state.json, 'TotalRecovered'), 'x') * 1.2],\n                            y: [0, this.findMax(bubbleChartData(this.state.json, 'TotalRecovered'), 'y') * 1.2]\n                        }}\n                        containerComponent={\n                            <VictoryZoomVoronoiContainer \n                                zoomDomain={{x: [0, 801000], y: [0, 130000]}}\n                                labels={({ datum }) => `${datum.country}: ${datum.amount} confirmed case(s)`}\n                            />\n                        }\n                    >   \n                        <VictoryLabel\n                            fontSize={10}\n                            x={250}\n                            y={60}\n                            textAnchor=\"middle\"\n                            text=\"World: Total Deaths vs Recoveries per Country\"\n                        />\n                        <VictoryAxis\n                            style={sharedAxisStyles}\n                            tickFormat={(x) => (`${x / 1000}k`)}\n                            label=\"Total Recoveries\"\n                        ></VictoryAxis>\n                        <VictoryAxis\n                            dependentAxis\n                            tickFormat={(x) => (`${x / 1000}k`)}\n                            label=\"Total Deaths\"\n                            style={sharedAxisStyles}\n                        ></VictoryAxis>\n                        <VictoryScatter\n                            style={{ data: { fill: \"#c43a31\", opacity: \"50%\" } }}\n                            bubbleProperty=\"amount\"\n                            maxBubbleSize={20}\n                            minBubbleSize={1}\n                            data={bubbleChartData(this.state.json, 'TotalRecovered')}\n                            events={[{\n                                target: 'data',\n                                eventHandlers: {\n                                    onClick: (event, data) => {\n                                        let cCode = data.datum.countryCode\n                                        console.log(cCode);\n                                        this.setState({countryCode: cCode});\n                                    },\n                                },\n                            }]}\n                        >\n                        </VictoryScatter>\n                    </VictoryChart>\n                </div>\n            ); \n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}