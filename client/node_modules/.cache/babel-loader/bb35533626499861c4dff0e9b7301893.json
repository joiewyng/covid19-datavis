{"ast":null,"code":"var _jsxFileName = \"/Users/i537493/Documents/repos/covid19-datavis/client/src/components/BubbleChartDb.js\";\nimport React from 'react';\nimport { VictoryChart, VictoryAxis, VictoryTheme, VictoryLabel, VictoryScatter, createContainer } from 'victory';\nimport CountryChart from './CountryChart';\nimport Temp from './Temp';\nimport ManageData from './ManageData';\nconst sharedAxisStyles = {\n  tickLabels: {\n    fontSize: 10\n  },\n  axisLabel: {\n    padding: 45,\n    fontSize: 10,\n    fontStyle: \"italic\"\n  }\n};\nconst VictoryZoomVoronoiContainer = createContainer(\"zoom\", \"voronoi\");\n/*\n    Formats [json] data, setting x and y axes for bubble chart \n    Returns: object array containing reformatted data \n*/\n\nfunction bubbleChartData(json) {\n  let array = Array.from(json);\n  let bubbleData = array.map(obj => ({\n    x: obj.TotalRecovered,\n    y: obj.TotalDeaths,\n    amount: obj.TotalConfirmed,\n    country: obj.Country,\n    countryCode: obj.CountryCode\n  }));\n  return bubbleData;\n}\n\nexport default class BubbleChartDb extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      json: {},\n      countryCode: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleJson = this.handleJson.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      countryCode: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  handleJson(dataJson) {\n    this.setState({\n      json: dataJson\n    });\n  }\n\n  findMax(array, prop) {\n    if (array.length !== 0) {\n      let maxObj = array.reduce((max, val) => val[prop] > max[prop] ? val : max);\n      let max = maxObj[prop];\n      return max;\n    }\n  }\n\n  async componentDidMount() {\n    this.setState({\n      loading: false\n    });\n  }\n\n  render() {\n    if (this.state.loading || this.state.json.length === 0) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 20\n        }\n      }, \"loading...\");\n    }\n\n    if (this.state.countryCode !== '') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.setState({\n          countryCode: ''\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }\n      }, \"Back to World Chart\"), /*#__PURE__*/React.createElement(CountryChart, {\n        countryCode: this.state.countryCode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Temp, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(ManageData, {\n        setJson: this.handleJson,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          paddingLeft: '15%',\n          marginTop: -50\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(VictoryChart, {\n        style: {\n          parent: {\n            maxWidth: \"80%\"\n          }\n        },\n        height: 400,\n        width: 500,\n        padding: 100,\n        theme: VictoryTheme.material,\n        animate: {\n          duration: 1000\n        },\n        domain: {\n          x: [0, this.findMax(bubbleChartData(this.state.json), 'x') * 1.2],\n          y: [0, this.findMax(bubbleChartData(this.state.json), 'y') * 1.2]\n        },\n        containerComponent: /*#__PURE__*/React.createElement(VictoryZoomVoronoiContainer, {\n          zoomDomain: {\n            x: [0, 801000],\n            y: [0, 130000]\n          } // labels={({ datum }) => `${datum.country}\\n${datum.amount} confirmed case(s), \\n${datum.x} recovered, ${datum.y} deaths`}\n          ,\n          labels: ({\n            datum\n          }) => `${datum.country}\\n${datum.amount} confirmed case(s)`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 29\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(VictoryLabel, {\n        fontSize: 10,\n        x: 250,\n        y: 60,\n        textAnchor: \"middle\",\n        text: \"World: Total Deaths vs Recoveries per Country\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(VictoryAxis, {\n        style: sharedAxisStyles,\n        tickFormat: x => `${x / 1000}k`,\n        label: \"Total Recoveries\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(VictoryAxis, {\n        dependentAxis: true,\n        tickFormat: x => `${x / 1000}k`,\n        label: \"Total Deaths\",\n        style: sharedAxisStyles,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(VictoryScatter, {\n        style: {\n          data: {\n            fill: \"#c43a31\",\n            opacity: \"50%\"\n          }\n        },\n        bubbleProperty: \"amount\",\n        maxBubbleSize: 20,\n        minBubbleSize: 1,\n        data: bubbleChartData(this.state.json),\n        events: [{\n          target: 'data',\n          eventHandlers: {\n            onClick: (event, data) => {\n              let cCode = data.datum.countryCode;\n              this.setState({\n                countryCode: cCode\n              });\n            }\n          }\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 25\n        }\n      }))));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/i537493/Documents/repos/covid19-datavis/client/src/components/BubbleChartDb.js"],"names":["React","VictoryChart","VictoryAxis","VictoryTheme","VictoryLabel","VictoryScatter","createContainer","CountryChart","Temp","ManageData","sharedAxisStyles","tickLabels","fontSize","axisLabel","padding","fontStyle","VictoryZoomVoronoiContainer","bubbleChartData","json","array","Array","from","bubbleData","map","obj","x","TotalRecovered","y","TotalDeaths","amount","TotalConfirmed","country","Country","countryCode","CountryCode","BubbleChartDb","Component","constructor","props","state","loading","handleChange","bind","handleSubmit","handleJson","event","setState","target","value","preventDefault","dataJson","findMax","prop","length","maxObj","reduce","max","val","componentDidMount","render","display","flexWrap","paddingLeft","marginTop","parent","maxWidth","material","duration","datum","data","fill","opacity","eventHandlers","onClick","cCode"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n     VictoryChart,\n     VictoryAxis, \n     VictoryTheme, \n     VictoryLabel,\n     VictoryScatter,\n     createContainer,\n    } from 'victory';\nimport CountryChart from './CountryChart'\nimport Temp from './Temp';\nimport ManageData from './ManageData';\n\nconst sharedAxisStyles = {\n    tickLabels: {\n        fontSize: 10\n    },\n    axisLabel: {\n        padding: 45,\n        fontSize: 10,\n        fontStyle: \"italic\"\n    }\n    };\n\nconst VictoryZoomVoronoiContainer = createContainer(\"zoom\", \"voronoi\");\n\n/*\n    Formats [json] data, setting x and y axes for bubble chart \n    Returns: object array containing reformatted data \n*/\nfunction bubbleChartData(json) {\n    let array = Array.from(json);\n    let bubbleData = array.map(obj => ({\n        x: obj.TotalRecovered,\n        y: obj.TotalDeaths,  \n        amount: obj.TotalConfirmed, \n        country: obj.Country,\n        countryCode: obj.CountryCode\n    }));\n    return bubbleData;\n}\n\n\nexport default class BubbleChartDb extends React.Component {\n    state = {\n        loading: true,\n        json: {},\n        countryCode : ''\n    };\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleJson = this.handleJson.bind(this);\n    }\n\n    handleChange(event) {\n            this.setState({\n                countryCode: event.target.value\n            });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n    }\n\n    handleJson (dataJson) {\n        this.setState({\n            json: dataJson,\n        })\n    }\n\n    findMax(array, prop){\n        if (array.length !== 0){\n            let maxObj = array.reduce((max, val) => val[prop] > max[prop] ? val : max);\n            let max = maxObj[prop];\n            return max;\n        }\n    }\n\n    async componentDidMount() {\n        this.setState({loading: false});\n      \n    }\n\n    render() {\n        if (this.state.loading || this.state.json.length === 0){\n            return(<div>loading...</div>);\n        }\n\n        if (this.state.countryCode !== ''){\n            return(\n                <>\n                <button onClick= {() => this.setState({countryCode: ''})}>Back to World Chart</button>\n                <CountryChart countryCode={this.state.countryCode}/>\n                </>\n            );\n        } else{\n            return (\n                <div> \n                    <Temp/>\n                    <ManageData setJson={this.handleJson}/>\n                    <div style={{ display: \"flex\", flexWrap: \"wrap\", paddingLeft: '15%', marginTop: -50 }}>\n                    <VictoryChart\n                        style={{ parent: { maxWidth: \"80%\" } }}\n                        height={400}\n                        width={500}\n                        padding={100}\n                        theme={\n                            VictoryTheme.material\n                        }\n                        animate={{\n                            duration: 1000\n                        }}\n                        domain={{\n                            x: [0, this.findMax(bubbleChartData(this.state.json), 'x') * 1.2],\n                            y: [0, this.findMax(bubbleChartData(this.state.json), 'y') * 1.2]\n                        }}\n                        containerComponent={\n                            <VictoryZoomVoronoiContainer \n                                zoomDomain={{\n                                    x: [0, 801000], y: [0, 130000]\n                                }}\n                                // labels={({ datum }) => `${datum.country}\\n${datum.amount} confirmed case(s), \\n${datum.x} recovered, ${datum.y} deaths`}\n                                labels={({ datum }) => `${datum.country}\\n${datum.amount} confirmed case(s)`}\n                            />\n                        }\n                    >   \n                        <VictoryLabel\n                            fontSize={10}\n                            x={250}\n                            y={60}\n                            textAnchor=\"middle\"\n                            text=\"World: Total Deaths vs Recoveries per Country\"\n                        />\n                        <VictoryAxis\n                            style={sharedAxisStyles}\n                            tickFormat={(x) => (`${x / 1000}k`)}\n                            label=\"Total Recoveries\"\n                        ></VictoryAxis>\n                        <VictoryAxis\n                            dependentAxis\n                            tickFormat={(x) => (`${x / 1000}k`)}\n                            label=\"Total Deaths\"\n                            style={sharedAxisStyles}\n                        ></VictoryAxis>\n                        <VictoryScatter\n                            style={{ data: { fill: \"#c43a31\", opacity: \"50%\" } }}\n                            bubbleProperty=\"amount\"\n                            maxBubbleSize={20}\n                            minBubbleSize={1}\n                            data={bubbleChartData(this.state.json)}\n                            events={[{\n                                target: 'data',\n                                eventHandlers: {\n                                    onClick: (event, data) => {\n                                        let cCode = data.datum.countryCode\n                                        this.setState({countryCode: cCode});\n                                    },\n                                },\n                            }]}\n                        >\n                        </VictoryScatter>\n                    </VictoryChart>\n                </div>\n                </div>\n                \n            ); \n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}