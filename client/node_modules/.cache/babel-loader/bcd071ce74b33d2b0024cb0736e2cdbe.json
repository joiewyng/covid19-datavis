{"ast":null,"code":"var _jsxFileName = \"/Users/i537493/Documents/repos/covid19-datavis/client/src/components/BubbleChart.js\";\nimport React from 'react';\nimport { VictoryChart, VictoryAxis, VictoryBar, VictoryTheme, VictoryVoronoiContainer, VictoryLabel, VictoryStack, VictoryArea, VictoryScatter, VictoryZoomContainer, createContainer, VictoryLegend, VictoryLine } from 'victory';\nimport CountryChart from './CountryChart';\nconst sharedAxisStyles = {\n  tickLabels: {\n    fontSize: 10\n  },\n  axisLabel: {\n    padding: 45,\n    fontSize: 10,\n    fontStyle: \"italic\"\n  }\n};\nconst VictoryZoomVoronoiContainer = createContainer(\"zoom\", \"voronoi\");\n\nfunction bubbleChartData(json, metric) {\n  let array = json.Countries;\n  let bubbleData = array.map(obj => ({\n    x: obj.TotalDeaths,\n    y: obj[metric],\n    amount: obj.TotalConfirmed,\n    country: obj.Country,\n    countryCode: obj.CountryCode\n  }));\n  return bubbleData;\n}\n\nexport default class BubbleChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      json: {},\n      countryCode: ''\n    };\n    this.handleChange = this.handleChange.bind(this); // this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async handleChange(event) {\n    // const stateUrl3 = \"https://covidtracking.com/api/v1/states/\" + event.target.value + \"/daily.json\";\n    // const stateResponse3 = await fetch(stateUrl3);\n    // const stateData3 = await stateResponse3.json();\n    this.setState({\n      countryCode: event.target.value\n    });\n    console.log(event.target.value);\n  }\n\n  async componentDidMount() {\n    const url = \"https://api.covid19api.com/summary\";\n    const response = await fetch(url);\n    const data = await response.json();\n    console.log(data);\n    this.setState({\n      loading: false,\n      json: data\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 20\n        }\n      }, \"loading...\");\n    }\n\n    if (this.state.countryCode !== '') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.setState({\n          countryCode: ''\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }\n      }, \"Back to World Chart\"), /*#__PURE__*/React.createElement(\"select\", {\n        value: this.state.countryCode,\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"FR\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }\n      }, \"France\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"BR\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }\n      }, \"Brazil\")), /*#__PURE__*/React.createElement(CountryChart, {\n        countryCode: this.state.countryCode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          paddingLeft: '15%',\n          marginTop: -50\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(VictoryChart, {\n        style: {\n          parent: {\n            maxWidth: \"80%\"\n          }\n        },\n        height: 400,\n        width: 500,\n        padding: 100,\n        theme: VictoryTheme.material,\n        animate: {\n          duration: 10000\n        },\n        domain: {\n          x: [0, 130000],\n          y: [0, 700000]\n        },\n        containerComponent: /*#__PURE__*/React.createElement(VictoryZoomVoronoiContainer, {\n          zoomDomain: {\n            x: [0, 130000],\n            y: [0, 700000]\n          },\n          labels: ({\n            datum\n          }) => `${datum.country}: ${datum.amount} confirmed case(s)`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(VictoryLabel, {\n        fontSize: 10,\n        x: 250,\n        y: 60,\n        textAnchor: \"middle\",\n        text: \"World: Total Deaths vs Recoveries per Country\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(VictoryAxis, {\n        style: sharedAxisStyles,\n        tickFormat: x => `${x / 1000}k`,\n        label: \"Total Recoveries\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(VictoryAxis, {\n        dependentAxis: true,\n        tickFormat: x => `${x / 1000}k`,\n        label: \"Total Deaths\",\n        style: sharedAxisStyles,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(VictoryScatter, {\n        style: {\n          data: {\n            fill: \"#c43a31\",\n            opacity: \"50%\"\n          }\n        },\n        bubbleProperty: \"amount\",\n        maxBubbleSize: 20,\n        minBubbleSize: 1,\n        data: bubbleChartData(this.state.json, 'TotalRecovered'),\n        events: [{\n          target: 'data',\n          eventHandlers: {\n            onClick: (event, data) => {\n              let cCode = data.datum.countryCode;\n              console.log(cCode);\n              this.setState({\n                countryCode: cCode\n              });\n            }\n          }\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }\n      })));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/i537493/Documents/repos/covid19-datavis/client/src/components/BubbleChart.js"],"names":["React","VictoryChart","VictoryAxis","VictoryBar","VictoryTheme","VictoryVoronoiContainer","VictoryLabel","VictoryStack","VictoryArea","VictoryScatter","VictoryZoomContainer","createContainer","VictoryLegend","VictoryLine","CountryChart","sharedAxisStyles","tickLabels","fontSize","axisLabel","padding","fontStyle","VictoryZoomVoronoiContainer","bubbleChartData","json","metric","array","Countries","bubbleData","map","obj","x","TotalDeaths","y","amount","TotalConfirmed","country","Country","countryCode","CountryCode","BubbleChart","Component","constructor","props","state","loading","handleChange","bind","event","setState","target","value","console","log","componentDidMount","url","response","fetch","data","render","display","flexWrap","paddingLeft","marginTop","parent","maxWidth","material","duration","datum","fill","opacity","eventHandlers","onClick","cCode"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n     VictoryChart,\n     VictoryAxis, \n     VictoryBar, \n     VictoryTheme, \n     VictoryVoronoiContainer,\n     VictoryLabel,\n     VictoryStack,\n     VictoryArea,\n     VictoryScatter,\n     VictoryZoomContainer,\n     createContainer,\n     VictoryLegend,\n     VictoryLine\n    } from 'victory';\nimport CountryChart from './CountryChart'\n\nconst sharedAxisStyles = {\n    tickLabels: {\n        fontSize: 10\n    },\n    axisLabel: {\n        padding: 45,\n        fontSize: 10,\n        fontStyle: \"italic\"\n    }\n    };\n\nconst VictoryZoomVoronoiContainer = createContainer(\"zoom\", \"voronoi\");\n    \nfunction bubbleChartData(json, metric) {\n    let array = json.Countries;\n    let bubbleData = array.map(obj => ({\n        x: obj.TotalDeaths, \n        y: obj[metric], \n        amount: obj.TotalConfirmed, \n        country: obj.Country,\n        countryCode: obj.CountryCode\n    }));\n    return bubbleData;\n}\n\n\nexport default class BubbleChart extends React.Component {\n    state = {\n        loading: true,\n        json: {},\n        countryCode : ''\n    };\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        // this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    async handleChange(event) {\n        \n            // const stateUrl3 = \"https://covidtracking.com/api/v1/states/\" + event.target.value + \"/daily.json\";\n            // const stateResponse3 = await fetch(stateUrl3);\n            // const stateData3 = await stateResponse3.json();\n            this.setState({\n                countryCode: event.target.value\n            })\n            console.log(event.target.value)\n\n    }\n\n\n    async componentDidMount() {\n        const url = \"https://api.covid19api.com/summary\";\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n        this.setState({loading: false, json: data});\n    }\n\n    render() {\n        if (this.state.loading){\n            return(<div>loading...</div>);\n        }\n\n        if (this.state.countryCode !== ''){\n            return(\n                <>\n                <button onClick= {() => this.setState({countryCode: ''})}>Back to World Chart</button>\n            \n                <select value={this.state.countryCode} onChange={this.handleChange}>\n                    <option value=\"FR\">France</option>\n                    <option value=\"BR\">Brazil</option>\n                </select>\n                \n                <CountryChart countryCode={this.state.countryCode}/>\n                </>\n            );\n        } else {\n\n\n\n        return (\n        \n        <div style={{ display: \"flex\", flexWrap: \"wrap\", paddingLeft: '15%', marginTop: -50 }}>\n            <VictoryChart\n            style={{ parent: { maxWidth: \"80%\" } }}\n            height={400}\n            width={500}\n            padding={100}\n            theme={\n                VictoryTheme.material\n            }\n            animate={{\n                duration: 10000\n            }}\n            domain={{x: [0, 130000], y: [0, 700000]}}\n            containerComponent={\n                <VictoryZoomVoronoiContainer \n                zoomDomain={{x: [0, 130000], y: [0, 700000]}}\n                labels={({ datum }) => `${datum.country}: ${datum.amount} confirmed case(s)`}\n                />\n              }\n            >   \n            <VictoryLabel\n                    fontSize={10}\n                    x={250}\n                    y={60}\n                    textAnchor=\"middle\"\n                    text=\"World: Total Deaths vs Recoveries per Country\"\n                />\n            <VictoryAxis\n                style={sharedAxisStyles}\n                tickFormat={(x) => (`${x / 1000}k`)}\n                label=\"Total Recoveries\"\n            ></VictoryAxis>\n            <VictoryAxis\n                dependentAxis\n                tickFormat={(x) => (`${x / 1000}k`)}\n                label=\"Total Deaths\"\n                style={sharedAxisStyles}\n            ></VictoryAxis>\n            <VictoryScatter\n             style={{ data: { fill: \"#c43a31\", opacity: \"50%\" } }}\n             bubbleProperty=\"amount\"\n             maxBubbleSize={20}\n             minBubbleSize={1}\n             data={bubbleChartData(this.state.json, 'TotalRecovered')}\n             events={[{\n                 target: 'data',\n                 eventHandlers: {\n                     onClick: (event, data) => {\n                         let cCode = data.datum.countryCode\n                         console.log(cCode);\n                         this.setState({countryCode: cCode});\n                     },\n                 },\n             }]}\n             >\n\n            </VictoryScatter>\n            </VictoryChart>\n        </div>\n            ); \n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}