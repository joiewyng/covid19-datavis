{"ast":null,"code":"var _jsxFileName = \"/Users/i537493/Documents/repos/covid19-datavis/client/src/components/BubbleChart.js\";\nimport React from 'react';\nimport { VictoryChart, VictoryAxis, VictoryBar, VictoryTheme, VictoryVoronoiContainer, VictoryLabel, VictoryStack, VictoryArea, VictoryScatter, VictoryZoomContainer, createContainer, VictoryLegend, VictoryLine } from 'victory';\nconst sharedAxisStyles = {\n  tickLabels: {\n    fontSize: 10\n  },\n  axisLabel: {\n    padding: 45,\n    fontSize: 10,\n    fontStyle: \"italic\"\n  }\n};\nconst VictoryZoomVoronoiContainer = createContainer(\"zoom\", \"voronoi\");\n\nfunction bubbleChartData(json, metric) {\n  let array = json.Countries;\n  let bubbleData = array.map(obj => ({\n    x: obj.TotalDeaths,\n    y: obj[metric],\n    amount: obj.TotalConfirmed,\n    country: obj.Country,\n    countryCode: obj.CountryCode\n  }));\n  return bubbleData;\n}\n\nexport default class BubbleChart extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      json: {},\n      countryCode: ''\n    };\n  }\n\n  async componentDidMount() {\n    const url = \"https://api.covid19api.com/summary\";\n    const response = await fetch(url);\n    const data = await response.json();\n    console.log(data);\n    this.setState({\n      loading: false,\n      json: data\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 20\n        }\n      }, \"loading...\");\n    }\n\n    if (this.state.countryCode !== '') {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(CountryChart, {\n        countryCode: this.state.countryCode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 18\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        paddingLeft: '15%',\n        marginTop: -50\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(VictoryChart, {\n      style: {\n        parent: {\n          maxWidth: \"80%\"\n        }\n      },\n      height: 400,\n      width: 500,\n      padding: 100,\n      theme: VictoryTheme.material,\n      animate: {\n        duration: 10000\n      },\n      domain: {\n        x: [0, 130000],\n        y: [0, 700000]\n      },\n      containerComponent: /*#__PURE__*/React.createElement(VictoryZoomVoronoiContainer, {\n        zoomDomain: {\n          x: [0, 130000],\n          y: [0, 700000]\n        },\n        labels: ({\n          datum\n        }) => `${datum.country}: ${datum.amount} confirmed case(s)`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(VictoryLabel, {\n      fontSize: 10,\n      x: 250,\n      y: 60,\n      textAnchor: \"middle\",\n      text: \"World: Total Deaths vs Recoveries per Country\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(VictoryAxis, {\n      style: sharedAxisStyles,\n      tickFormat: x => `${x / 1000}k`,\n      label: \"Total Recoveries\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(VictoryAxis, {\n      dependentAxis: true,\n      tickFormat: x => `${x / 1000}k`,\n      label: \"Total Deaths\",\n      style: sharedAxisStyles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(VictoryScatter, {\n      style: {\n        data: {\n          fill: \"#c43a31\",\n          opacity: \"50%\"\n        }\n      },\n      bubbleProperty: \"amount\",\n      maxBubbleSize: 20,\n      minBubbleSize: 1,\n      data: bubbleChartData(this.state.json, 'TotalRecovered'),\n      events: [{\n        target: 'data',\n        eventHandlers: {\n          onClick: (event, data) => {\n            let cCode = data.datum.countryCode;\n            console.log(cCode);\n            this.setState({\n              countryCode: cCode\n            });\n          }\n        }\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nfunction configData(json) {\n  const data = [];\n  let endIdx = json.length - 1;\n\n  for (let i = endIdx; i >= 0; i--) {\n    let idx = endIdx - i;\n    let obj = json[idx];\n    let posIncr = i === 0 ? 0 : obj.TotalConfirmed - json[idx + 1].TotalConfirmed;\n    let recovIncr = i === 0 ? 0 : obj.recovered - json[idx + 1].recovered;\n    let deathIncr = i === 0 ? 0 : obj.death - json[idx + 1].death;\n    let state = obj.state ? '' : obj.state;\n    data.push({\n      index: i,\n      date: obj.date,\n      positive: obj.positive,\n      posIncr: posIncr,\n      recovered: obj.recovered,\n      recovIncr: recovIncr,\n      death: obj.death,\n      deathIncr: deathIncr,\n      state: state\n    });\n  }\n\n  return data;\n}\n\nfunction lineChartData(json, metric) {\n  let array = configData(json);\n  let lineData = array.map(obj => ({\n    x: obj.index,\n    y: obj[metric]\n  }));\n  return lineData;\n}\n\nfunction date(index, json) {\n  let date = json[json.length - 1 - index].date;\n  return date;\n}\n\nclass CountryChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      json: {}\n    };\n  }\n\n  async componentDidMount() {\n    let cc = this.props.countryCode.toLowerCase();\n    const url = \"https://api.covid19api.com/live/country/\" + cc + \"/status/confirmed/date/2020-03-21T13:13:30Z\";\n    const response = await fetch(url);\n    const data = await response.json();\n    console.log(data);\n    this.setState({\n      loading: false,\n      json: data\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 20\n        }\n      }, \"loading...\");\n    }\n\n    return (\n      /*#__PURE__*/\n      // <div>{this.props.countryCode}</div>\n      React.createElement(VictoryChart, {\n        height: 400,\n        width: 400,\n        padding: 100,\n        theme: VictoryTheme.material,\n        animate: {\n          duration: 1000\n        },\n        style: {\n          parent: {\n            maxWidth: \"30%\"\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(VictoryLegend, {\n        orientation: \"vertical\",\n        y: 100,\n        x: 295,\n        symbolSpacer: 10,\n        gutter: 10,\n        style: {\n          title: {\n            fontSize: 10\n          }\n        },\n        data: [{\n          name: \"Positive Cases\",\n          symbol: {\n            fill: \"red\",\n            type: \"star\"\n          }\n        }, {\n          name: \"Recoveries\",\n          symbol: {\n            fill: \"blue\",\n            type: \"square\"\n          }\n        }, {\n          name: \"Deaths\",\n          symbol: {\n            fill: \"black\",\n            type: \"square\"\n          }\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(VictoryLabel, {\n        fontSize: 5,\n        x: 200,\n        y: 60,\n        textAnchor: \"middle\",\n        text: this.props.countryCode + \"Daily Change in Positive Cases, Recoveries, Deaths\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 10\n        }\n      }), /*#__PURE__*/React.createElement(VictoryAxis, {\n        style: sharedAxisStyles,\n        tickValues: [0, this.state.json.length],\n        tickFormat: [date(0, this.state.json), date(this.state.json.length - 1, this.state.json)],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(VictoryAxis, {\n        dependentAxis: true,\n        tickFormat: x => `${x / 1000}k`,\n        label: \"Number of People\",\n        style: sharedAxisStyles,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(VictoryLine, {\n        interpolation: \"natural\",\n        style: {\n          data: {\n            stroke: \"#c43a31\"\n          }\n        },\n        data: lineChartData(this.state.json, 'posIncr'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(VictoryStack, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(VictoryArea, {\n        interpolation: \"natural\",\n        style: {\n          data: {\n            fill: \"black\"\n          }\n        },\n        data: lineChartData(this.state.json, 'deathIncr'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(VictoryArea, {\n        interpolation: \"natural\",\n        style: {\n          data: {\n            fill: \"blue\"\n          }\n        },\n        data: lineChartData(this.state.json, 'recovIncr'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }\n      })))\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/i537493/Documents/repos/covid19-datavis/client/src/components/BubbleChart.js"],"names":["React","VictoryChart","VictoryAxis","VictoryBar","VictoryTheme","VictoryVoronoiContainer","VictoryLabel","VictoryStack","VictoryArea","VictoryScatter","VictoryZoomContainer","createContainer","VictoryLegend","VictoryLine","sharedAxisStyles","tickLabels","fontSize","axisLabel","padding","fontStyle","VictoryZoomVoronoiContainer","bubbleChartData","json","metric","array","Countries","bubbleData","map","obj","x","TotalDeaths","y","amount","TotalConfirmed","country","Country","countryCode","CountryCode","BubbleChart","Component","state","loading","componentDidMount","url","response","fetch","data","console","log","setState","render","display","flexWrap","paddingLeft","marginTop","parent","maxWidth","material","duration","datum","fill","opacity","target","eventHandlers","onClick","event","cCode","configData","endIdx","length","i","idx","posIncr","recovIncr","recovered","deathIncr","death","push","index","date","positive","lineChartData","lineData","CountryChart","constructor","props","cc","toLowerCase","title","name","symbol","type","stroke"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n     VictoryChart,\n     VictoryAxis, \n     VictoryBar, \n     VictoryTheme, \n     VictoryVoronoiContainer,\n     VictoryLabel,\n     VictoryStack,\n     VictoryArea,\n     VictoryScatter,\n     VictoryZoomContainer,\n     createContainer,\n     VictoryLegend,\n     VictoryLine\n    } from 'victory';\n\nconst sharedAxisStyles = {\n    tickLabels: {\n        fontSize: 10\n    },\n    axisLabel: {\n        padding: 45,\n        fontSize: 10,\n        fontStyle: \"italic\"\n    }\n    };\n\nconst VictoryZoomVoronoiContainer = createContainer(\"zoom\", \"voronoi\");\n    \nfunction bubbleChartData(json, metric) {\n    let array = json.Countries;\n    let bubbleData = array.map(obj => ({\n        x: obj.TotalDeaths, \n        y: obj[metric], \n        amount: obj.TotalConfirmed, \n        country: obj.Country,\n        countryCode: obj.CountryCode\n    }));\n    return bubbleData;\n}\n\n\nexport default class BubbleChart extends React.Component {\n    state = {\n        loading: true,\n        json: {},\n        countryCode : ''\n    };\n\n    async componentDidMount() {\n        const url = \"https://api.covid19api.com/summary\";\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n        this.setState({loading: false, json: data});\n    }\n\n    render() {\n        if (this.state.loading){\n            return(<div>loading...</div>);\n        }\n\n        if (this.state.countryCode !== ''){\n            return(\n            <div><CountryChart countryCode={this.state.countryCode}/></div>)\n        }\n\n        return (\n        <div style={{ display: \"flex\", flexWrap: \"wrap\", paddingLeft: '15%', marginTop: -50 }}>\n            <VictoryChart\n            style={{ parent: { maxWidth: \"80%\" } }}\n            height={400}\n            width={500}\n            padding={100}\n            theme={\n                VictoryTheme.material\n            }\n            animate={{\n                duration: 10000\n            }}\n            domain={{x: [0, 130000], y: [0, 700000]}}\n            containerComponent={\n                <VictoryZoomVoronoiContainer \n                zoomDomain={{x: [0, 130000], y: [0, 700000]}}\n                labels={({ datum }) => `${datum.country}: ${datum.amount} confirmed case(s)`}\n                />\n              }\n            >   \n            <VictoryLabel\n                    fontSize={10}\n                    x={250}\n                    y={60}\n                    textAnchor=\"middle\"\n                    text=\"World: Total Deaths vs Recoveries per Country\"\n                />\n            <VictoryAxis\n                style={sharedAxisStyles}\n                tickFormat={(x) => (`${x / 1000}k`)}\n                label=\"Total Recoveries\"\n            ></VictoryAxis>\n            <VictoryAxis\n                dependentAxis\n                tickFormat={(x) => (`${x / 1000}k`)}\n                label=\"Total Deaths\"\n                style={sharedAxisStyles}\n            ></VictoryAxis>\n            <VictoryScatter\n             style={{ data: { fill: \"#c43a31\", opacity: \"50%\" } }}\n             bubbleProperty=\"amount\"\n             maxBubbleSize={20}\n             minBubbleSize={1}\n             data={bubbleChartData(this.state.json, 'TotalRecovered')}\n             events={[{\n                 target: 'data',\n                 eventHandlers: {\n                     onClick: (event, data) => {\n                         let cCode = data.datum.countryCode\n                         console.log(cCode);\n                         this.setState({countryCode: cCode});\n                     },\n                 },\n             }]}\n             >\n\n            </VictoryScatter>\n            </VictoryChart>\n        </div>\n            ); \n    }\n}\n\nfunction configData(json) {\n    const data = [];\n    let endIdx = json.length-1;\n    for (let i = endIdx; i >= 0; i--){\n        let idx = endIdx-i;\n        let obj = json[idx];\n        let posIncr = (i===0 ? 0 : (obj.TotalConfirmed - json[idx+1].TotalConfirmed));\n        let recovIncr = (i===0 ? 0 : (obj.recovered - json[idx+1].recovered));\n        let deathIncr = (i===0 ? 0 : (obj.death - json[idx+1].death));\n        let state = (obj.state ? '' : obj.state);\n        data.push({\n            index: i,\n            date: obj.date,\n            positive: obj.positive, \n            posIncr: posIncr,\n            recovered: obj.recovered,\n            recovIncr: recovIncr,\n            death: obj.death,\n            deathIncr: deathIncr,\n            state: state\n        });\n    }\n    return data;\n}\n\nfunction lineChartData(json, metric) {\n    let array = configData(json);\n    let lineData = array.map(obj => ({x: obj.index, y: obj[metric]}));\n    return lineData;\n}\n\nfunction date(index, json){\n    let date = json[json.length-1-index].date;\n    return date;\n}\n\nclass CountryChart extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            loading: true,\n            json: {},\n        };\n    }\n\n    async componentDidMount() {\n        let cc = this.props.countryCode.toLowerCase();\n        const url = \"https://api.covid19api.com/live/country/\"+ cc +\"/status/confirmed/date/2020-03-21T13:13:30Z\";\n        const response = await fetch(url);\n        const data = await response.json();\n        console.log(data);\n        this.setState({loading: false, json: data});\n    }\n\n    render() {\n        if (this.state.loading){\n            return(<div>loading...</div>);\n        }\n\n        return (\n       \n            // <div>{this.props.countryCode}</div>\n \n        <VictoryChart\n            height={400}\n            width={400}\n            \n            padding={100}\n            theme={VictoryTheme.material}\n            animate={{\n                duration: 1000\n            }}\n            style={{ parent: { maxWidth: \"30%\" } }}\n        >\n        <VictoryLegend \n            orientation=\"vertical\"\n            y={100}\n            x={295}\n            symbolSpacer={10}\n            gutter={10}\n            style={{  title: {fontSize: 10 } }}\n            data={[\n            { name: \"Positive Cases\", symbol: { fill: \"red\", type: \"star\" } },\n            { name: \"Recoveries\", symbol: { fill: \"blue\", type: \"square\" } },\n            { name: \"Deaths\", symbol: { fill: \"black\", type: \"square\" } }\n            ]}\n        />\n         <VictoryLabel\n            fontSize={5}\n            x={200}\n            y={60}\n            textAnchor=\"middle\"\n            text= {this.props.countryCode + \"Daily Change in Positive Cases, Recoveries, Deaths\"}\n        />\n        <VictoryAxis\n            style={sharedAxisStyles}\n            tickValues={[0, this.state.json.length]}\n            tickFormat={[date(0, this.state.json), date(this.state.json.length-1, this.state.json)]}\n        ></VictoryAxis>\n        <VictoryAxis\n            dependentAxis\n            tickFormat={(x) => (`${x / 1000}k`)}\n            label=\"Number of People\"\n            style={sharedAxisStyles}\n        ></VictoryAxis>\n        <VictoryLine\n        interpolation=\"natural\"\n        style={{ data: { stroke: \"#c43a31\" } }}\n        data={lineChartData(this.state.json, 'posIncr')}\n        />\n\n        <VictoryStack>\n                    \n            <VictoryArea\n            interpolation=\"natural\"\n            style={{ data: { fill: \"black\" } }}\n            data={lineChartData(this.state.json, 'deathIncr')}\n            />\n            <VictoryArea\n            interpolation=\"natural\"\n            style={{ data: { fill: \"blue\" } }}\n            data={lineChartData(this.state.json, 'recovIncr')}\n            />\n        </VictoryStack>\n        </VictoryChart>\n \n        \n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}