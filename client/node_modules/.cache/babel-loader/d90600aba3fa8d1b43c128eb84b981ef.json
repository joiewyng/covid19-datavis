{"ast":null,"code":"var _jsxFileName = \"/Users/i537493/Documents/repos/covid19-datavis/client/src/components/CountryChart.js\";\nimport React from 'react';\nimport { VictoryChart, VictoryAxis, VictoryBar, VictoryTheme, VictoryVoronoiContainer, VictoryLabel, VictoryStack, VictoryArea, VictoryScatter, VictoryZoomContainer, createContainer, VictoryLegend, VictoryLine } from 'victory';\nconst sharedAxisStyles = {\n  tickLabels: {\n    fontSize: 10\n  },\n  axisLabel: {\n    padding: 45,\n    fontSize: 10,\n    fontStyle: \"italic\"\n  }\n};\n\nfunction configData(json) {\n  const data = [];\n  let endIdx = json.length - 1;\n\n  for (let i = 0; i <= endIdx; i++) {\n    let obj = json[i];\n    let changeConf = i === 0 ? 0 : obj.Cases - json[i - 1].Cases; // let recovIncr = (i===0 ? 0 : (json[idx+1].Recovered - obj.Recovered));\n    // let deathIncr = (i===0 ? 0 : (json[idx+1].Deaths - obj.Deaths));\n    // let state = (obj.state ? '' : obj.state);\n\n    data.push({\n      index: i,\n      date: obj.Date,\n      confirmed: obj.Cases,\n      changeConf: changeConf // changeConfirmed: changeConf\n      // positive: obj.positive, \n      // posIncr: posIncr,\n      // recovered: obj.recovered,\n      // recovIncr: recovIncr,\n      // death: obj.death,\n      // deathIncr: deathIncr,\n      // state: state\n\n    });\n  }\n\n  return data;\n}\n\nfunction lineChartData(json, metric) {\n  let array = configData(json);\n  let lineData = array.map(obj => ({\n    x: obj.index,\n    y: obj[metric]\n  }));\n  return lineData;\n}\n\nfunction date(index, json) {\n  let date = json[index].Date.split(\"T\")[0];\n  return date;\n}\n\nexport default class CountryChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      //dates ordered from least recent to most recent\n      json: [{}]\n    };\n  }\n\n  async componentDidMount() {\n    let jsonArray = [];\n    let ccArray = this.props.countryCode;\n\n    for (let i = 0; i < ccArray.length; i++) {\n      let cc = ccArray[i].toLowerCase();\n      console.log(cc);\n      const url = \"https://api.covid19api.com/total/country/\" + cc + \"/status/confirmed\";\n      const response = await fetch(url);\n      const data = await response.json();\n      console.log(data);\n      jsonArray = jsonArray.push(data);\n    }\n\n    console.log('json array:' + jsonArray);\n    this.setState({\n      loading: false,\n      json: jsonArray\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 20\n        }\n      }, \"loading...\");\n    }\n\n    let multipleLines = LineArray(this, this.state.json);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(VictoryChart, {\n      height: 400,\n      width: 400,\n      padding: 100,\n      theme: VictoryTheme.material,\n      animate: {\n        duration: 200\n      },\n      style: {\n        parent: {\n          maxWidth: \"45%\",\n          marginLeft: \"25%\"\n        }\n      },\n      containerComponent: /*#__PURE__*/React.createElement(VictoryVoronoiContainer, {\n        labels: ({\n          datum\n        }) => `${date(datum.index, this.state.json)}: ${datum.changeConf} case(s)`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(VictoryLegend, {\n      orientation: \"vertical\",\n      y: 100,\n      x: 295,\n      symbolSpacer: 10,\n      gutter: 10,\n      style: {\n        title: {\n          fontSize: 10\n        }\n      },\n      data: [{\n        name: \"Positive Cases\",\n        symbol: {\n          fill: \"red\",\n          type: \"star\"\n        }\n      } // { name: \"Recoveries\", symbol: { fill: \"blue\", type: \"square\" } },\n      // { name: \"Deaths\", symbol: { fill: \"black\", type: \"square\" } }\n      ],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(VictoryLabel, {\n      fontSize: 5,\n      x: 200,\n      y: 60,\n      textAnchor: \"middle\",\n      text: this.state.json[0].Country + \": Daily Change in Positive Cases\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(VictoryAxis, {\n      style: sharedAxisStyles,\n      tickValues: [0, this.state.json.length],\n      tickFormat: [date(0, this.state.json), date(this.state.json.length - 1, this.state.json)],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(VictoryAxis, {\n      dependentAxis: true,\n      tickFormat: x => `${x / 1000}k`,\n      label: \"Number of People\",\n      style: sharedAxisStyles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }), multipleLines));\n  }\n\n}\n\nfunction LineArray(chart, jsonArray) {\n  console.log(chart.state.json);\n  let lineArray = [];\n  jsonArray.forEach(function (jsonObj, index) {\n    lineArray.push(Line(configData(jsonObj, 'changeConf')));\n  });\n  return lineArray;\n}\n\nfunction Line(jsonObj) {\n  return /*#__PURE__*/React.createElement(VictoryLine, {\n    interpolation: \"natural\",\n    style: {\n      data: {\n        stroke: \"#c43a31\"\n      }\n    },\n    data: jsonObj,\n    x: \"index\",\n    y: \"changeConf\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 12\n    }\n  });\n}","map":{"version":3,"sources":["/Users/i537493/Documents/repos/covid19-datavis/client/src/components/CountryChart.js"],"names":["React","VictoryChart","VictoryAxis","VictoryBar","VictoryTheme","VictoryVoronoiContainer","VictoryLabel","VictoryStack","VictoryArea","VictoryScatter","VictoryZoomContainer","createContainer","VictoryLegend","VictoryLine","sharedAxisStyles","tickLabels","fontSize","axisLabel","padding","fontStyle","configData","json","data","endIdx","length","i","obj","changeConf","Cases","push","index","date","Date","confirmed","lineChartData","metric","array","lineData","map","x","y","split","CountryChart","Component","constructor","props","state","loading","componentDidMount","jsonArray","ccArray","countryCode","cc","toLowerCase","console","log","url","response","fetch","setState","render","multipleLines","LineArray","material","duration","parent","maxWidth","marginLeft","datum","title","name","symbol","fill","type","Country","chart","lineArray","forEach","jsonObj","Line","stroke"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n     VictoryChart,\n     VictoryAxis, \n     VictoryBar, \n     VictoryTheme, \n     VictoryVoronoiContainer,\n     VictoryLabel,\n     VictoryStack,\n     VictoryArea,\n     VictoryScatter,\n     VictoryZoomContainer,\n     createContainer,\n     VictoryLegend,\n     VictoryLine\n    } from 'victory';\n\nconst sharedAxisStyles = {\n    tickLabels: {\n        fontSize: 10\n    },\n    axisLabel: {\n        padding: 45,\n        fontSize: 10,\n        fontStyle: \"italic\"\n    }\n    };\n\nfunction configData(json) {\n    const data = [];\n    let endIdx = json.length-1;\n    for (let i = 0; i <= endIdx; i++){\n        let obj = json[i];\n        let changeConf = (i===0 ? 0 : (obj.Cases) - json[i-1].Cases);\n        // let recovIncr = (i===0 ? 0 : (json[idx+1].Recovered - obj.Recovered));\n        // let deathIncr = (i===0 ? 0 : (json[idx+1].Deaths - obj.Deaths));\n        // let state = (obj.state ? '' : obj.state);\n        data.push({\n            index: i,\n            date: obj.Date,\n            confirmed: obj.Cases,\n            changeConf: changeConf\n            // changeConfirmed: changeConf\n            // positive: obj.positive, \n            // posIncr: posIncr,\n            // recovered: obj.recovered,\n            // recovIncr: recovIncr,\n            // death: obj.death,\n            // deathIncr: deathIncr,\n            // state: state\n        });\n    }\n    return data;\n}\n\nfunction lineChartData(json, metric) {\n    let array = configData(json);\n    let lineData = array.map(obj => ({x: obj.index, y: obj[metric]}));\n    return lineData;\n}\n\nfunction date(index, json){\n    let date = json[index].Date.split(\"T\")[0];\n    return date;\n}\n\nexport default class CountryChart extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            loading: true,\n            //dates ordered from least recent to most recent\n            json: [{}],\n        };\n    }\n\n    async componentDidMount() {\n        let jsonArray = [];\n        let ccArray = this.props.countryCode\n        for (let i = 0; i < ccArray.length; i++){\n            let cc = ccArray[i].toLowerCase();\n            console.log(cc);\n            const url = \"https://api.covid19api.com/total/country/\"+cc+\"/status/confirmed\";\n            const response = await fetch(url);\n            const data = await response.json();\n            console.log(data);\n            jsonArray = jsonArray.push(data);\n        }\n        console.log('json array:' + jsonArray);\n        this.setState({loading: false, json: jsonArray});\n    }\n\n    render() {\n        \n        if (this.state.loading){\n            return(<div>loading...</div>);\n        }\n        let multipleLines = LineArray(this, this.state.json);\n        return (\n       <>\n        <VictoryChart\n            height={400}\n            width={400}\n            \n            padding={100}\n            theme={VictoryTheme.material}\n            \n            animate={{\n                duration: 200\n            }}\n            style={{ parent: { maxWidth: \"45%\", marginLeft: \"25%\"} }}\n            containerComponent={\n                <VictoryVoronoiContainer\n                  labels={({ datum }) => \n                    `${date(datum.index, this.state.json)}: ${datum.changeConf} case(s)`\n                  \n                  \n                }\n                />\n              }\n        >\n        <VictoryLegend \n            orientation=\"vertical\"\n            y={100}\n            x={295}\n            symbolSpacer={10}\n            gutter={10}\n            style={{  title: {fontSize: 10 } }}\n            data={[\n            { name: \"Positive Cases\", symbol: { fill: \"red\", type: \"star\" } },\n            // { name: \"Recoveries\", symbol: { fill: \"blue\", type: \"square\" } },\n            // { name: \"Deaths\", symbol: { fill: \"black\", type: \"square\" } }\n            ]}\n        />\n         <VictoryLabel\n            fontSize={5}\n            x={200}\n            y={60}\n            textAnchor=\"middle\"\n            text= {this.state.json[0].Country + \": Daily Change in Positive Cases\"}\n        />\n        <VictoryAxis\n            style={sharedAxisStyles}\n            tickValues={[0, this.state.json.length]}\n            tickFormat={[date(0, this.state.json), date(this.state.json.length-1, this.state.json)]}\n        ></VictoryAxis>\n        <VictoryAxis\n            dependentAxis\n            tickFormat={(x) => (`${x / 1000}k`)}\n            label=\"Number of People\"\n            style={sharedAxisStyles}\n        ></VictoryAxis>\n        {multipleLines}\n        {/* <VictoryLine\n        interpolation=\"natural\"\n        style={{ data: { stroke: \"#c43a31\" } }}\n        data={configData(this.state.json, 'changeConf')}\n        x=\"index\"\n        y=\"changeConf\"  \n        /> */}\n{/* \n        <VictoryStack>\n                    \n            <VictoryArea\n            interpolation=\"natural\"\n            style={{ data: { fill: \"black\" } }}\n            data={lineChartData(this.state.json, 'deathIncr')}\n            />\n            <VictoryArea\n            interpolation=\"natural\"\n            style={{ data: { fill: \"blue\" } }}\n            data={lineChartData(this.state.json, 'recovIncr')}\n            />\n        </VictoryStack> */}\n        </VictoryChart>\n </>\n        \n        );\n    }\n}\n\nfunction LineArray(chart, jsonArray) {\n    console.log((chart.state.json));\n    let lineArray = [];\n    jsonArray.forEach(function (jsonObj, index) {\n      lineArray.push(Line(configData(jsonObj, 'changeConf')));\n    })\n    return lineArray;\n  }\n\nfunction Line(jsonObj){\n   return( <VictoryLine\n        interpolation=\"natural\"\n        style={{ data: { stroke: \"#c43a31\" } }}\n        data={jsonObj}\n        x=\"index\"\n        y=\"changeConf\"  \n    />)\n}\n"]},"metadata":{},"sourceType":"module"}