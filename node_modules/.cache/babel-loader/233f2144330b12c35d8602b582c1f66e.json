{"ast":null,"code":"var _jsxFileName = \"/Users/i537493/Documents/repos/data-vis/src/components/USAData.js\";\nimport React from 'react';\nimport { VictoryChart, VictoryAxis, VictoryBar, VictoryTheme, VictoryVoronoiContainer, VictoryLabel, VictoryArea, VictoryLine, VictoryLegend, VictoryStack, VictoryZoomContainer, VictoryContainer } from 'victory';\nconst sharedAxisStyles = {\n  tickLabels: {\n    fontSize: 10\n  },\n  axisLabel: {\n    padding: 45,\n    fontSize: 10,\n    fontStyle: \"italic\"\n  }\n};\n\nfunction configData(json) {\n  const data = [];\n  let endIdx = json.length - 1;\n\n  for (let i = endIdx; i >= 1; i--) {\n    let idx = endIdx - i;\n    let obj = json[idx];\n    let posIncr = i === 0 ? 0 : obj.positive - json[idx + 1].positive;\n    let recovIncr = i === 0 ? 0 : obj.recovered - json[idx + 1].recovered;\n    let deathIncr = i === 0 ? 0 : obj.death - json[idx + 1].death;\n    data.push({\n      index: i,\n      date: obj.date,\n      positive: obj.positive,\n      posIncr: posIncr,\n      recovered: obj.recovered,\n      recovIncr: recovIncr,\n      death: obj.death,\n      deathIncr: deathIncr\n    });\n  }\n\n  return data;\n}\n\nfunction lineChartData(json, metric) {\n  let array = configData(json);\n  let lineData = array.map(obj => ({\n    x: obj.index,\n    y: obj[metric]\n  }));\n  return lineData;\n}\n\nfunction date(index, json) {\n  let date = json[index].date.toString();\n  date = date.substr(4, 2) + \"/\" + date.substr(6) + \"/\" + date.substr(0, 4);\n  return date;\n}\n\nexport default class FetchData extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      json: {},\n      stateJson: {} //NOTE: json objects ordered from most recent date to oldest date\n\n    };\n  }\n\n  async componentDidMount() {\n    const url = \"https://covidtracking.com/api/us/daily\";\n    const usaResponse = await fetch(url);\n    const usaData = await usaResponse.json();\n    const stateUrl = \"https://covidtracking.com/api/v1/states/ca/daily.json\";\n    const stateResponse = await fetch(stateUrl);\n    const stateData = await stateResponse.json();\n    this.setState({\n      loading: false,\n      stateJson: usaData\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 20\n        }\n      }, \"loading...\");\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        paddingLeft: '10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(VictoryChart, {\n      height: 400,\n      width: 400,\n      padding: 100,\n      theme: VictoryTheme.material,\n      animate: {\n        duration: 500\n      },\n      containerComponent: /*#__PURE__*/React.createElement(VictoryVoronoiContainer, {\n        labels: ({\n          datum\n        }) => `${date(datum.index, this.state.json)}: ${datum.posIncr} new case(s)`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }\n      }),\n      style: {\n        parent: {\n          maxWidth: \"40%\"\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(VictoryLabel, {\n      fontSize: 10,\n      x: 200,\n      y: 60,\n      textAnchor: \"middle\",\n      text: \"USA: Number of Positive Cases over Time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(VictoryAxis, {\n      style: sharedAxisStyles,\n      tickValues: [0, this.state.json.length],\n      tickFormat: [date(this.state.json.length - 1, this.state.json), date(0, this.state.json)],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(VictoryAxis, {\n      dependentAxis: true,\n      tickFormat: x => `${x / 1000}k`,\n      label: \"Number of New Cases\",\n      style: sharedAxisStyles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(VictoryBar, {\n      data: configData(this.state.json),\n      x: \"index\",\n      y: \"positive\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(VictoryChart, {\n      height: 400,\n      width: 400,\n      padding: 100,\n      theme: VictoryTheme.material,\n      animate: {\n        duration: 500\n      },\n      style: {\n        parent: {\n          maxWidth: \"40%\"\n        }\n      } // containerComponent={\n      //     <VictoryZoomContainer zoomDomain={{x: [5, 35], y: [0, 100]}}/>\n      // }\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(VictoryLegend, {\n      orientation: \"vertical\",\n      y: 100,\n      x: 295,\n      symbolSpacer: 10,\n      gutter: 10,\n      style: {\n        title: {\n          fontSize: 10\n        }\n      },\n      data: [{\n        name: \"Positive Cases\",\n        symbol: {\n          fill: \"red\",\n          type: \"star\"\n        }\n      }, {\n        name: \"Recoveries\",\n        symbol: {\n          fill: \"blue\",\n          type: \"square\"\n        }\n      }, {\n        name: \"Deaths\",\n        symbol: {\n          fill: \"black\",\n          type: \"square\"\n        }\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(VictoryLabel, {\n      fontSize: 5,\n      x: 200,\n      y: 60,\n      textAnchor: \"middle\",\n      text: \"USA: Daily Change in Positive Cases, Recoveries, Deaths\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(VictoryAxis, {\n      style: sharedAxisStyles,\n      tickValues: [0, this.state.json.length],\n      tickFormat: [date(this.state.json.length - 1, this.state.json), date(0, this.state.json)],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(VictoryAxis, {\n      dependentAxis: true,\n      tickFormat: x => `${x / 1000}k`,\n      label: \"Number of People\",\n      style: sharedAxisStyles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(VictoryLine, {\n      interpolation: \"natural\",\n      style: {\n        data: {\n          stroke: \"#c43a31\"\n        }\n      },\n      data: lineChartData(this.state.json, 'posIncr'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(VictoryStack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(VictoryArea, {\n      interpolation: \"natural\",\n      style: {\n        data: {\n          fill: \"black\"\n        }\n      },\n      data: lineChartData(this.state.json, 'deathIncr'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(VictoryArea, {\n      interpolation: \"natural\",\n      style: {\n        data: {\n          fill: \"blue\"\n        }\n      },\n      data: lineChartData(this.state.json, 'recovIncr'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/i537493/Documents/repos/data-vis/src/components/USAData.js"],"names":["React","VictoryChart","VictoryAxis","VictoryBar","VictoryTheme","VictoryVoronoiContainer","VictoryLabel","VictoryArea","VictoryLine","VictoryLegend","VictoryStack","VictoryZoomContainer","VictoryContainer","sharedAxisStyles","tickLabels","fontSize","axisLabel","padding","fontStyle","configData","json","data","endIdx","length","i","idx","obj","posIncr","positive","recovIncr","recovered","deathIncr","death","push","index","date","lineChartData","metric","array","lineData","map","x","y","toString","substr","FetchData","Component","state","loading","stateJson","componentDidMount","url","usaResponse","fetch","usaData","stateUrl","stateResponse","stateData","setState","render","display","flexWrap","paddingLeft","material","duration","datum","parent","maxWidth","title","name","symbol","fill","type","stroke"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n     VictoryChart,\n     VictoryAxis, \n     VictoryBar, \n     VictoryTheme, \n     VictoryVoronoiContainer,\n     VictoryLabel,\n     VictoryArea,\n     VictoryLine,\n     VictoryLegend,\n     VictoryStack,\n     VictoryZoomContainer,\n     VictoryContainer\n    } from 'victory';\n\nconst sharedAxisStyles = {\n    tickLabels: {\n      fontSize: 10\n    },\n    axisLabel: {\n      padding: 45,\n      fontSize: 10,\n      fontStyle: \"italic\"\n    }\n  };\n\nfunction configData(json) {\n    const data = [];\n    let endIdx = json.length-1;\n    for (let i = endIdx; i >= 1; i--){\n        let idx = endIdx-i;\n        let obj = json[idx];\n        let posIncr = (i===0 ? 0 : (obj.positive - json[idx+1].positive));\n        let recovIncr = (i===0 ? 0 : (obj.recovered - json[idx+1].recovered));\n        let deathIncr = (i===0 ? 0 : (obj.death - json[idx+1].death));\n        data.push({\n            index: i,\n            date: obj.date,\n            positive: obj.positive, \n            posIncr: posIncr,\n            recovered: obj.recovered,\n            recovIncr: recovIncr,\n            death: obj.death,\n            deathIncr: deathIncr\n        });\n    }\n    return data;\n}\n\nfunction lineChartData(json, metric) {\n    let array = configData(json);\n    let lineData = array.map(obj => ({x: obj.index, y: obj[metric]}));\n    return lineData;\n}\n\nfunction date(index, json){\n    let date = json[index].date.toString();\n    date = date.substr(4,2) + \"/\" + date.substr(6) + \"/\" + date.substr(0,4);\n    return date;\n}\nexport default class FetchData extends React.Component {\n    state = {\n        loading: true,\n        json: {},\n        stateJson: {}\n        //NOTE: json objects ordered from most recent date to oldest date\n    };\n\n    async componentDidMount() {\n        const url = \"https://covidtracking.com/api/us/daily\";\n        const usaResponse = await fetch(url);\n        const usaData = await usaResponse.json();\n        const stateUrl = \"https://covidtracking.com/api/v1/states/ca/daily.json\";\n        const stateResponse = await fetch(stateUrl);\n        const stateData = await stateResponse.json();\n        this.setState({loading: false, stateJson: usaData});\n    }\n\n\n    render() {\n        if (this.state.loading){\n            return(<div>loading...</div>);\n        }\n\n        return (\n           <> \n           <div style={{ display: \"flex\", flexWrap: \"wrap\", paddingLeft: '10%' }}>\n{/* Bar Chart: Change in Positive Cases of COVID-19 USA */}\n<VictoryChart\n       \n            height={400}\n            width={400}\n            padding={100}\n            theme={VictoryTheme.material}\n            animate={{\n                duration: 500\n            }}\n            containerComponent={\n                <VictoryVoronoiContainer\n                  labels={({ datum }) => `${date(datum.index, this.state.json)}: ${datum.posIncr} new case(s)`}\n                />\n              }\n            style={{ parent: { maxWidth: \"40%\" } }}\n            >\n                 <VictoryLabel\n                    fontSize={10}\n                    x={200}\n                    y={60}\n                    textAnchor=\"middle\"\n                    text=\"USA: Number of Positive Cases over Time\"\n                />\n                <VictoryAxis\n                    style={sharedAxisStyles}\n                    tickValues={[0, this.state.json.length]}\n                    tickFormat={[date(this.state.json.length-1, this.state.json), date(0, this.state.json)]}\n                ></VictoryAxis>\n                <VictoryAxis\n                    dependentAxis\n                    tickFormat={(x) => (`${x / 1000}k`)}\n                    label=\"Number of New Cases\"\n                    style={sharedAxisStyles}\n                ></VictoryAxis>\n\n                <VictoryBar\n                    data={configData(this.state.json)}\n                    x=\"index\"\n                    y=\"positive\"          \n                />\n            </VictoryChart>\n            \n            <VictoryChart\n                height={400}\n                width={400}\n                \n                padding={100}\n                theme={VictoryTheme.material}\n                animate={{\n                    duration: 500\n                }}\n                style={{ parent: { maxWidth: \"40%\" } }}\n                // containerComponent={\n                //     <VictoryZoomContainer zoomDomain={{x: [5, 35], y: [0, 100]}}/>\n                // }\n            >\n                <VictoryLegend \n                    orientation=\"vertical\"\n                    y={100}\n                    x={295}\n                    symbolSpacer={10}\n                    gutter={10}\n                    style={{  title: {fontSize: 10 } }}\n                    data={[\n                    { name: \"Positive Cases\", symbol: { fill: \"red\", type: \"star\" } },\n                    { name: \"Recoveries\", symbol: { fill: \"blue\", type: \"square\" } },\n                    { name: \"Deaths\", symbol: { fill: \"black\", type: \"square\" } }\n                    ]}\n                />\n                 <VictoryLabel\n                    fontSize={5}\n                    x={200}\n                    y={60}\n                    textAnchor=\"middle\"\n                    text=\"USA: Daily Change in Positive Cases, Recoveries, Deaths\"\n                />\n                <VictoryAxis\n                    style={sharedAxisStyles}\n                    tickValues={[0, this.state.json.length]}\n                    tickFormat={[date(this.state.json.length-1, this.state.json), date(0, this.state.json)]}\n                ></VictoryAxis>\n                <VictoryAxis\n                    dependentAxis\n                    tickFormat={(x) => (`${x / 1000}k`)}\n                    label=\"Number of People\"\n                    style={sharedAxisStyles}\n                ></VictoryAxis>\n                <VictoryLine\n                interpolation=\"natural\"\n                style={{ data: { stroke: \"#c43a31\" } }}\n                data={lineChartData(this.state.json, 'posIncr')}\n                />\n                <VictoryStack>\n                    \n                    <VictoryArea\n                    interpolation=\"natural\"\n                    style={{ data: { fill: \"black\" } }}\n                    data={lineChartData(this.state.json, 'deathIncr')}\n                    />\n                    <VictoryArea\n                    interpolation=\"natural\"\n                    style={{ data: { fill: \"blue\" } }}\n                    data={lineChartData(this.state.json, 'recovIncr')}\n                    />\n                </VictoryStack>\n                \n            </VictoryChart>\n            </div>\n             </>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}