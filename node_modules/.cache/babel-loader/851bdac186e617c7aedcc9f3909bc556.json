{"ast":null,"code":"var _jsxFileName = \"/Users/i537493/Documents/repos/data-vis/src/components/FetchData.js\";\nimport React from 'react';\nimport { VictoryChart, VictoryAxis, VictoryBar, VictoryTheme, VictoryVoronoiContainer, VictoryLabel, VictoryArea, VictoryLine, VictoryLegend, VictoryStack } from 'victory';\nconst sharedAxisStyles = {\n  tickLabels: {\n    fontSize: 10\n  },\n  axisLabel: {\n    padding: 45,\n    fontSize: 10,\n    fontStyle: \"italic\"\n  }\n};\n\nfunction configData(json) {\n  console.log(json);\n  const data = [];\n  let endIdx = json.length - 1;\n\n  for (let i = endIdx; i >= 1; i--) {\n    let idx = endIdx - i;\n    let obj = json[idx];\n    let posIncr = i === 0 ? 0 : obj.positive - json[idx + 1].positive;\n    let recovIncr = i === 0 ? 0 : obj.recovered - json[idx + 1].recovered;\n    let deathIncr = i === 0 ? 0 : obj.death - json[idx + 1].death;\n    data.push({\n      index: i,\n      date: obj.date,\n      positive: obj.positive,\n      posIncr: posIncr,\n      recovered: obj.recovered,\n      recovIncr: recovIncr,\n      death: obj.death,\n      deathIncr: deathIncr\n    });\n  }\n\n  console.log('data' + JSON.stringify(data));\n  return data;\n}\n\nfunction lineChartData(json, metric) {\n  let array = configData(json);\n  console.log();\n  let lineData = array.map(obj => ({\n    x: obj.index,\n    y: obj[metric]\n  }));\n  return lineData;\n}\n\nfunction date(index, json) {\n  let date = json[index].date.toString();\n  date = date.substr(4, 2) + \"/\" + date.substr(6) + \"/\" + date.substr(0, 4);\n  return date;\n}\n\nexport default class FetchData extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      json: {} //NOTE: json objects ordered from most recent date to oldest date\n\n    };\n  }\n\n  async componentDidMount() {\n    const url = \"https://covidtracking.com/api/us/daily\";\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({\n      loading: false,\n      json: data\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 20\n        }\n      }, \"loading...\");\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(VictoryChart, {\n      height: 400,\n      width: 400,\n      padding: 100,\n      theme: VictoryTheme.material,\n      animate: {\n        duration: 500\n      },\n      containerComponent: /*#__PURE__*/React.createElement(VictoryVoronoiContainer, {\n        labels: ({\n          datum\n        }) => `${date(datum.index, this.state.json)}: ${datum.posIncr} new case(s)`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(VictoryLabel, {\n      fontSize: 10,\n      x: 200,\n      y: 60,\n      textAnchor: \"middle\",\n      text: \"COVID-19 USA: Daily Change in Positive Cases\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(VictoryAxis, {\n      style: sharedAxisStyles,\n      tickValues: [0, this.state.json.length],\n      tickFormat: [date(this.state.json.length - 1, this.state.json), date(0, this.state.json)],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(VictoryAxis, {\n      dependentAxis: true,\n      tickFormat: x => `${x / 1000}k`,\n      label: \"Number of New Cases\",\n      style: sharedAxisStyles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(VictoryBar, {\n      data: configData(this.state.json),\n      x: \"index\",\n      y: \"posIncr\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(VictoryChart, {\n      height: 400,\n      width: 400,\n      padding: 100,\n      theme: VictoryTheme.material,\n      animate: {\n        duration: 500\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(VictoryLegend, {\n      x: 125,\n      y: 50,\n      orientation: \"horizontal\",\n      y: 350,\n      x: 50,\n      gutter: 10,\n      style: {\n        border: {\n          stroke: \"black\"\n        },\n        title: {\n          fontSize: 10\n        }\n      },\n      data: [{\n        name: \"Positive Cases\",\n        symbol: {\n          fill: \"red\",\n          type: \"star\"\n        }\n      }, {\n        name: \"Recoveries\",\n        symbol: {\n          fill: \"blue\",\n          type: \"square\"\n        }\n      }, {\n        name: \"Deaths\",\n        symbol: {\n          fill: \"black\",\n          type: \"square\"\n        }\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(VictoryLabel, {\n      fontSize: 10,\n      x: 200,\n      y: 60,\n      textAnchor: \"middle\",\n      text: \"COVID-19 USA: Daily Change in Positive Cases, Recoveries, Deaths\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(VictoryAxis, {\n      style: sharedAxisStyles,\n      tickValues: [0, this.state.json.length],\n      tickFormat: [date(this.state.json.length - 1, this.state.json), date(0, this.state.json)],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(VictoryAxis, {\n      dependentAxis: true,\n      tickFormat: x => `${x / 1000}k`,\n      label: \"Number of People\",\n      style: sharedAxisStyles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(VictoryLine, {\n      interpolation: \"natural\",\n      style: {\n        data: {\n          fill: \"#c43a31\"\n        }\n      },\n      data: lineChartData(this.state.json, 'posIncr'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(VictoryArea // interpolation=\"natural\"\n    , {\n      style: {\n        data: {\n          fill: \"blue\"\n        }\n      },\n      data: lineChartData(this.state.json, 'recovIncr'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(VictoryArea // interpolation=\"natural\"\n    , {\n      data: lineChartData(this.state.json, 'deathIncr'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/i537493/Documents/repos/data-vis/src/components/FetchData.js"],"names":["React","VictoryChart","VictoryAxis","VictoryBar","VictoryTheme","VictoryVoronoiContainer","VictoryLabel","VictoryArea","VictoryLine","VictoryLegend","VictoryStack","sharedAxisStyles","tickLabels","fontSize","axisLabel","padding","fontStyle","configData","json","console","log","data","endIdx","length","i","idx","obj","posIncr","positive","recovIncr","recovered","deathIncr","death","push","index","date","JSON","stringify","lineChartData","metric","array","lineData","map","x","y","toString","substr","FetchData","Component","state","loading","componentDidMount","url","response","fetch","setState","render","material","duration","datum","border","stroke","title","name","symbol","fill","type"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n     VictoryChart,\n     VictoryAxis, \n     VictoryBar, \n     VictoryTheme, \n     VictoryVoronoiContainer,\n     VictoryLabel,\n     VictoryArea,\n     VictoryLine,\n     VictoryLegend,\n     VictoryStack\n    } from 'victory';\n\nconst sharedAxisStyles = {\n    tickLabels: {\n      fontSize: 10\n    },\n    axisLabel: {\n      padding: 45,\n      fontSize: 10,\n      fontStyle: \"italic\"\n    }\n  };\n\nfunction configData(json) {\n    console.log(json);\n    const data = [];\n    let endIdx = json.length-1;\n    for (let i = endIdx; i >= 1; i--){\n        let idx = endIdx-i;\n        let obj = json[idx];\n        let posIncr = (i===0 ? 0 : (obj.positive - json[idx+1].positive));\n        let recovIncr = (i===0 ? 0 : (obj.recovered - json[idx+1].recovered));\n        let deathIncr = (i===0 ? 0 : (obj.death - json[idx+1].death));\n        data.push({\n            index: i,\n            date: obj.date,\n            positive: obj.positive, \n            posIncr: posIncr,\n            recovered: obj.recovered,\n            recovIncr: recovIncr,\n            death: obj.death,\n            deathIncr: deathIncr\n        });\n    }\n    console.log('data' + JSON.stringify(data));\n    return data;\n}\n\nfunction lineChartData(json, metric) {\n    let array = configData(json);\n    console.log()\n    let lineData = array.map(obj => ({x: obj.index, y: obj[metric]}));\n    return lineData;\n}\n\nfunction date(index, json){\n    let date = json[index].date.toString();\n    date = date.substr(4,2) + \"/\" + date.substr(6) + \"/\" + date.substr(0,4);\n    return date;\n}\nexport default class FetchData extends React.Component {\n    state = {\n        loading: true,\n        json: {}\n        //NOTE: json objects ordered from most recent date to oldest date\n    };\n\n    async componentDidMount() {\n        const url = \"https://covidtracking.com/api/us/daily\";\n        const response = await fetch(url);\n        const data = await response.json();\n        this.setState({loading: false, json: data});\n    }\n\n\n    render() {\n        if (this.state.loading){\n            return(<div>loading...</div>);\n        }\n\n        return (\n           <> \n           {/* Bar Chart: Change in Positive Cases of COVID-19 USA */}\n            <VictoryChart\n            height={400}\n            width={400}\n            padding={100}\n            theme={VictoryTheme.material}\n            animate={{\n                duration: 500\n            }}\n            containerComponent={\n                <VictoryVoronoiContainer\n                  labels={({ datum }) => `${date(datum.index, this.state.json)}: ${datum.posIncr} new case(s)`}\n                />\n              }\n            >\n                 <VictoryLabel\n                    fontSize={10}\n                    x={200}\n                    y={60}\n                    textAnchor=\"middle\"\n                    text=\"COVID-19 USA: Daily Change in Positive Cases\"\n                />\n                <VictoryAxis\n                    style={sharedAxisStyles}\n                    tickValues={[0, this.state.json.length]}\n                    tickFormat={[date(this.state.json.length-1, this.state.json), date(0, this.state.json)]}\n                ></VictoryAxis>\n                <VictoryAxis\n                    dependentAxis\n                    tickFormat={(x) => (`${x / 1000}k`)}\n                    label=\"Number of New Cases\"\n                    style={sharedAxisStyles}\n                ></VictoryAxis>\n\n                <VictoryBar\n                    data={configData(this.state.json)}\n                    x=\"index\"\n                    y=\"posIncr\"          \n                />\n            </VictoryChart>\n            \n            <VictoryChart\n                height={400}\n                width={400}\n                padding={100}\n                theme={VictoryTheme.material}\n                animate={{\n                    duration: 500\n                }}\n            >\n                <VictoryLegend x={125} y={50}\n                    orientation=\"horizontal\"\n                    y={350}\n                    x={50}\n                    gutter={10}\n                    style={{ border: { stroke: \"black\" }, title: {fontSize: 10 } }}\n                    data={[\n                    { name: \"Positive Cases\", symbol: { fill: \"red\", type: \"star\" } },\n                    { name: \"Recoveries\", symbol: { fill: \"blue\", type: \"square\" } },\n                    { name: \"Deaths\", symbol: { fill: \"black\", type: \"square\" } }\n                    ]}\n                />\n                 <VictoryLabel\n                    fontSize={10}\n                    x={200}\n                    y={60}\n                    textAnchor=\"middle\"\n                    text=\"COVID-19 USA: Daily Change in Positive Cases, Recoveries, Deaths\"\n                />\n                <VictoryAxis\n                    style={sharedAxisStyles}\n                    tickValues={[0, this.state.json.length]}\n                    tickFormat={[date(this.state.json.length-1, this.state.json), date(0, this.state.json)]}\n                ></VictoryAxis>\n                <VictoryAxis\n                    dependentAxis\n                    tickFormat={(x) => (`${x / 1000}k`)}\n                    label=\"Number of People\"\n                    style={sharedAxisStyles}\n                ></VictoryAxis>\n                <VictoryLine\n                interpolation=\"natural\"\n                style={{ data: { fill: \"#c43a31\" } }}\n                data={lineChartData(this.state.json, 'posIncr')}\n                />\n                <VictoryArea\n                // interpolation=\"natural\"\n                style={{ data: { fill: \"blue\" } }}\n                data={lineChartData(this.state.json, 'recovIncr')}\n                />\n                <VictoryArea\n                // interpolation=\"natural\"\n                data={lineChartData(this.state.json, 'deathIncr')}\n                />\n            </VictoryChart>\n             \n             </>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}